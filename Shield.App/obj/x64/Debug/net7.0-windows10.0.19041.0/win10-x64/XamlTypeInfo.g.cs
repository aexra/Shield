//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Shield.App
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
        private global::Shield.App.Shield_App_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Shield.App.Shield_App_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace Shield.App.Shield_App_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Shield.App.Shield_App_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::Shield.App.Shield_App_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::Shield.App.Shield_App_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[143];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "Microsoft.UI.Xaml.Controls.Expander";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[6] = "Microsoft.UI.Xaml.Controls.ExpandDirection";
            _typeNameTable[7] = "System.Enum";
            _typeNameTable[8] = "System.ValueType";
            _typeNameTable[9] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[10] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[11] = "Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings";
            _typeNameTable[12] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[13] = "Shield.App.Controls.AlarmControl";
            _typeNameTable[14] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[15] = "String";
            _typeNameTable[16] = "Shield.DataAccess.Enums.AlarmResult";
            _typeNameTable[17] = "System.DateTime";
            _typeNameTable[18] = "System.DateOnly";
            _typeNameTable[19] = "System.TimeOnly";
            _typeNameTable[20] = "CommunityToolkit.WinUI.Media.AttachedCardShadow";
            _typeNameTable[21] = "CommunityToolkit.WinUI.AttachedShadowBase";
            _typeNameTable[22] = "Double";
            _typeNameTable[23] = "CommunityToolkit.WinUI.Media.InnerContentClipMode";
            _typeNameTable[24] = "Windows.UI.Color";
            _typeNameTable[25] = "CommunityToolkit.WinUI.Effects";
            _typeNameTable[26] = "Microsoft.UI.Xaml.FrameworkElement";
            _typeNameTable[27] = "Shield.App.Controls.ContractControl";
            _typeNameTable[28] = "Int32";
            _typeNameTable[29] = "System.Collections.ObjectModel.ObservableCollection`1<Microsoft.UI.Xaml.Controls.TextBlock>";
            _typeNameTable[30] = "System.Collections.ObjectModel.Collection`1<Microsoft.UI.Xaml.Controls.TextBlock>";
            _typeNameTable[31] = "Microsoft.UI.Xaml.Controls.TextBlock";
            _typeNameTable[32] = "Shield.DataAccess.DTOs.PlanDto";
            _typeNameTable[33] = "Shield.DataAccess.DTOs.PictureDto";
            _typeNameTable[34] = "Microsoft.UI.Xaml.Media.Imaging.BitmapImage";
            _typeNameTable[35] = "System.Collections.Generic.List`1<Shield.DataAccess.DTOs.AlarmDto>";
            _typeNameTable[36] = "Shield.DataAccess.DTOs.AlarmDto";
            _typeNameTable[37] = "System.Nullable`1<Int32>";
            _typeNameTable[38] = "System.Nullable`1<System.DateTime>";
            _typeNameTable[39] = "Shield.DataAccess.DTOs.ContractDto";
            _typeNameTable[40] = "System.Nullable`1<Shield.DataAccess.Enums.AlarmResult>";
            _typeNameTable[41] = "Shield.App.Controls.RegisterContent";
            _typeNameTable[42] = "Shield.App.Controls.RegisterLoginContent";
            _typeNameTable[43] = "Shield.App.Controls.RemovableTextBox";
            _typeNameTable[44] = "Microsoft.UI.Xaml.Controls.WebView2";
            _typeNameTable[45] = "Microsoft.Web.WebView2.Core.CoreWebView2";
            _typeNameTable[46] = "System.Uri";
            _typeNameTable[47] = "Shield.App.Dialogs.CreateContractDialog";
            _typeNameTable[48] = "System.Collections.Generic.List`1<String>";
            _typeNameTable[49] = "WinUIEx.WindowEx";
            _typeNameTable[50] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[51] = "Microsoft.UI.Windowing.AppWindow";
            _typeNameTable[52] = "WinUIEx.Icon";
            _typeNameTable[53] = "WinUIEx.WindowState";
            _typeNameTable[54] = "Microsoft.UI.Windowing.AppWindowPresenter";
            _typeNameTable[55] = "Microsoft.UI.Windowing.AppWindowPresenterKind";
            _typeNameTable[56] = "WinUIEx.SystemBackdrop";
            _typeNameTable[57] = "Microsoft.UI.Xaml.Media.MicaBackdrop";
            _typeNameTable[58] = "Microsoft.UI.Xaml.Media.SystemBackdrop";
            _typeNameTable[59] = "Microsoft.UI.Composition.SystemBackdrops.MicaKind";
            _typeNameTable[60] = "Shield.App.MainWindow";
            _typeNameTable[61] = "Microsoft.UI.Xaml.Thickness";
            _typeNameTable[62] = "Microsoft.UI.Xaml.CornerRadius";
            _typeNameTable[63] = "Shield.App.Views.AlarmsPage";
            _typeNameTable[64] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[65] = "Shield.App.ViewModels.AlarmsViewModel";
            _typeNameTable[66] = "CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient";
            _typeNameTable[67] = "CommunityToolkit.Mvvm.ComponentModel.ObservableObject";
            _typeNameTable[68] = "CommunityToolkit.WinUI.UI.Controls.DataGrid";
            _typeNameTable[69] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[70] = "System.Collections.IEnumerable";
            _typeNameTable[71] = "CommunityToolkit.WinUI.UI.Controls.DataGridGridLinesVisibility";
            _typeNameTable[72] = "Microsoft.UI.Xaml.Media.Brush";
            _typeNameTable[73] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[74] = "System.Collections.ObjectModel.ObservableCollection`1<CommunityToolkit.WinUI.UI.Controls.DataGridColumn>";
            _typeNameTable[75] = "System.Collections.ObjectModel.Collection`1<CommunityToolkit.WinUI.UI.Controls.DataGridColumn>";
            _typeNameTable[76] = "CommunityToolkit.WinUI.UI.Controls.DataGridColumn";
            _typeNameTable[77] = "Microsoft.UI.Xaml.Data.Binding";
            _typeNameTable[78] = "System.Nullable`1<CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection>";
            _typeNameTable[79] = "CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection";
            _typeNameTable[80] = "Microsoft.UI.Xaml.Visibility";
            _typeNameTable[81] = "CommunityToolkit.WinUI.UI.Controls.DataGridLength";
            _typeNameTable[82] = "CommunityToolkit.WinUI.UI.Controls.DataGridClipboardCopyMode";
            _typeNameTable[83] = "CommunityToolkit.WinUI.UI.Controls.DataGridHeadersVisibility";
            _typeNameTable[84] = "Microsoft.UI.Xaml.Controls.ScrollBarVisibility";
            _typeNameTable[85] = "Microsoft.UI.Xaml.Controls.IncrementalLoadingTrigger";
            _typeNameTable[86] = "CommunityToolkit.WinUI.UI.Controls.DataGridRowDetailsVisibilityMode";
            _typeNameTable[87] = "CommunityToolkit.WinUI.UI.Controls.DataGridSelectionMode";
            _typeNameTable[88] = "System.Collections.ObjectModel.ObservableCollection`1<Microsoft.UI.Xaml.Style>";
            _typeNameTable[89] = "System.Collections.ObjectModel.Collection`1<Microsoft.UI.Xaml.Style>";
            _typeNameTable[90] = "System.Collections.IList";
            _typeNameTable[91] = "CommunityToolkit.WinUI.UI.Controls.DataGridRow";
            _typeNameTable[92] = "CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn";
            _typeNameTable[93] = "CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn";
            _typeNameTable[94] = "Microsoft.UI.Xaml.Media.FontFamily";
            _typeNameTable[95] = "Windows.UI.Text.FontStyle";
            _typeNameTable[96] = "Windows.UI.Text.FontWeight";
            _typeNameTable[97] = "Shield.App.Views.AlarmsTableViewPage";
            _typeNameTable[98] = "Shield.App.ViewModels.AlarmsTableViewViewModel";
            _typeNameTable[99] = "Microsoft.UI.Xaml.Controls.DropDownButton";
            _typeNameTable[100] = "Microsoft.UI.Xaml.Controls.Button";
            _typeNameTable[101] = "Shield.App.Views.ContractsPage";
            _typeNameTable[102] = "Shield.App.ViewModels.ContractsViewModel";
            _typeNameTable[103] = "Shield.App.Views.ProfilePage";
            _typeNameTable[104] = "Shield.DataAccess.DTOs.ProfileInfoDto";
            _typeNameTable[105] = "Shield.App.Helpers.EnumToBooleanConverter";
            _typeNameTable[106] = "Shield.App.Views.SettingsPage";
            _typeNameTable[107] = "Shield.App.ViewModels.SettingsViewModel";
            _typeNameTable[108] = "Microsoft.UI.Xaml.Controls.NavigationView";
            _typeNameTable[109] = "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible";
            _typeNameTable[110] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[111] = "Microsoft.UI.Xaml.Controls.AutoSuggestBox";
            _typeNameTable[112] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[113] = "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode";
            _typeNameTable[114] = "Microsoft.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[115] = "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode";
            _typeNameTable[116] = "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode";
            _typeNameTable[117] = "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus";
            _typeNameTable[118] = "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled";
            _typeNameTable[119] = "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings";
            _typeNameTable[120] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[121] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[122] = "Microsoft.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[123] = "Microsoft.UI.Xaml.Controls.TeachingTip";
            _typeNameTable[124] = "Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode";
            _typeNameTable[125] = "System.Windows.Input.ICommand";
            _typeNameTable[126] = "Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode";
            _typeNameTable[127] = "Microsoft.UI.Xaml.Controls.IconSource";
            _typeNameTable[128] = "Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility";
            _typeNameTable[129] = "Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings";
            _typeNameTable[130] = "Microsoft.UI.Xaml.Controls.NavigationViewItem";
            _typeNameTable[131] = "Microsoft.UI.Xaml.Controls.NavigationViewItemBase";
            _typeNameTable[132] = "Microsoft.UI.Xaml.Controls.IconElement";
            _typeNameTable[133] = "Microsoft.UI.Xaml.Controls.InfoBadge";
            _typeNameTable[134] = "Shield.App.Helpers.NavigationHelper";
            _typeNameTable[135] = "Shield.App.Behaviors.NavigationViewHeaderBehavior";
            _typeNameTable[136] = "Microsoft.Xaml.Interactivity.Behavior`1<Microsoft.UI.Xaml.Controls.NavigationView>";
            _typeNameTable[137] = "Microsoft.Xaml.Interactivity.Behavior";
            _typeNameTable[138] = "Shield.App.Behaviors.NavigationViewHeaderMode";
            _typeNameTable[139] = "Shield.App.Views.ShellPage";
            _typeNameTable[140] = "Shield.App.ViewModels.ShellViewModel";
            _typeNameTable[141] = "Microsoft.UI.Xaml.Controls.TreeViewNode";
            _typeNameTable[142] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>";

            _typeTable = new global::System.Type[143];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::Microsoft.UI.Xaml.Controls.Expander);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[6] = typeof(global::Microsoft.UI.Xaml.Controls.ExpandDirection);
            _typeTable[7] = typeof(global::System.Enum);
            _typeTable[8] = typeof(global::System.ValueType);
            _typeTable[9] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[10] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[11] = typeof(global::Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings);
            _typeTable[12] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[13] = typeof(global::Shield.App.Controls.AlarmControl);
            _typeTable[14] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[15] = typeof(global::System.String);
            _typeTable[16] = typeof(global::Shield.DataAccess.Enums.AlarmResult);
            _typeTable[17] = typeof(global::System.DateTime);
            _typeTable[18] = typeof(global::System.DateOnly);
            _typeTable[19] = typeof(global::System.TimeOnly);
            _typeTable[20] = typeof(global::CommunityToolkit.WinUI.Media.AttachedCardShadow);
            _typeTable[21] = typeof(global::CommunityToolkit.WinUI.AttachedShadowBase);
            _typeTable[22] = typeof(global::System.Double);
            _typeTable[23] = typeof(global::CommunityToolkit.WinUI.Media.InnerContentClipMode);
            _typeTable[24] = typeof(global::Windows.UI.Color);
            _typeTable[25] = typeof(global::CommunityToolkit.WinUI.Effects);
            _typeTable[26] = typeof(global::Microsoft.UI.Xaml.FrameworkElement);
            _typeTable[27] = typeof(global::Shield.App.Controls.ContractControl);
            _typeTable[28] = typeof(global::System.Int32);
            _typeTable[29] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Controls.TextBlock>);
            _typeTable[30] = typeof(global::System.Collections.ObjectModel.Collection<global::Microsoft.UI.Xaml.Controls.TextBlock>);
            _typeTable[31] = typeof(global::Microsoft.UI.Xaml.Controls.TextBlock);
            _typeTable[32] = typeof(global::Shield.DataAccess.DTOs.PlanDto);
            _typeTable[33] = typeof(global::Shield.DataAccess.DTOs.PictureDto);
            _typeTable[34] = typeof(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage);
            _typeTable[35] = typeof(global::System.Collections.Generic.List<global::Shield.DataAccess.DTOs.AlarmDto>);
            _typeTable[36] = typeof(global::Shield.DataAccess.DTOs.AlarmDto);
            _typeTable[37] = typeof(global::System.Nullable<global::System.Int32>);
            _typeTable[38] = typeof(global::System.Nullable<global::System.DateTime>);
            _typeTable[39] = typeof(global::Shield.DataAccess.DTOs.ContractDto);
            _typeTable[40] = typeof(global::System.Nullable<global::Shield.DataAccess.Enums.AlarmResult>);
            _typeTable[41] = typeof(global::Shield.App.Controls.RegisterContent);
            _typeTable[42] = typeof(global::Shield.App.Controls.RegisterLoginContent);
            _typeTable[43] = typeof(global::Shield.App.Controls.RemovableTextBox);
            _typeTable[44] = typeof(global::Microsoft.UI.Xaml.Controls.WebView2);
            _typeTable[45] = typeof(global::Microsoft.Web.WebView2.Core.CoreWebView2);
            _typeTable[46] = typeof(global::System.Uri);
            _typeTable[47] = typeof(global::Shield.App.Dialogs.CreateContractDialog);
            _typeTable[48] = typeof(global::System.Collections.Generic.List<global::System.String>);
            _typeTable[49] = typeof(global::WinUIEx.WindowEx);
            _typeTable[50] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[51] = typeof(global::Microsoft.UI.Windowing.AppWindow);
            _typeTable[52] = typeof(global::WinUIEx.Icon);
            _typeTable[53] = typeof(global::WinUIEx.WindowState);
            _typeTable[54] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenter);
            _typeTable[55] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenterKind);
#pragma warning disable 0618  //   Warning on Deprecated usage
            _typeTable[56] = typeof(global::WinUIEx.SystemBackdrop);
#pragma warning restore 0618
            _typeTable[57] = typeof(global::Microsoft.UI.Xaml.Media.MicaBackdrop);
            _typeTable[58] = typeof(global::Microsoft.UI.Xaml.Media.SystemBackdrop);
            _typeTable[59] = typeof(global::Microsoft.UI.Composition.SystemBackdrops.MicaKind);
            _typeTable[60] = typeof(global::Shield.App.MainWindow);
            _typeTable[61] = typeof(global::Microsoft.UI.Xaml.Thickness);
            _typeTable[62] = typeof(global::Microsoft.UI.Xaml.CornerRadius);
            _typeTable[63] = typeof(global::Shield.App.Views.AlarmsPage);
            _typeTable[64] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[65] = typeof(global::Shield.App.ViewModels.AlarmsViewModel);
            _typeTable[66] = typeof(global::CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient);
            _typeTable[67] = typeof(global::CommunityToolkit.Mvvm.ComponentModel.ObservableObject);
            _typeTable[68] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGrid);
            _typeTable[69] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[70] = typeof(global::System.Collections.IEnumerable);
            _typeTable[71] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridGridLinesVisibility);
            _typeTable[72] = typeof(global::Microsoft.UI.Xaml.Media.Brush);
            _typeTable[73] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[74] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn>);
            _typeTable[75] = typeof(global::System.Collections.ObjectModel.Collection<global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn>);
            _typeTable[76] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn);
            _typeTable[77] = typeof(global::Microsoft.UI.Xaml.Data.Binding);
            _typeTable[78] = typeof(global::System.Nullable<global::CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection>);
            _typeTable[79] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection);
            _typeTable[80] = typeof(global::Microsoft.UI.Xaml.Visibility);
            _typeTable[81] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridLength);
            _typeTable[82] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridClipboardCopyMode);
            _typeTable[83] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridHeadersVisibility);
            _typeTable[84] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollBarVisibility);
            _typeTable[85] = typeof(global::Microsoft.UI.Xaml.Controls.IncrementalLoadingTrigger);
            _typeTable[86] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridRowDetailsVisibilityMode);
            _typeTable[87] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridSelectionMode);
            _typeTable[88] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Style>);
            _typeTable[89] = typeof(global::System.Collections.ObjectModel.Collection<global::Microsoft.UI.Xaml.Style>);
            _typeTable[90] = typeof(global::System.Collections.IList);
            _typeTable[91] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridRow);
            _typeTable[92] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn);
            _typeTable[93] = typeof(global::CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn);
            _typeTable[94] = typeof(global::Microsoft.UI.Xaml.Media.FontFamily);
            _typeTable[95] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[96] = typeof(global::Windows.UI.Text.FontWeight);
            _typeTable[97] = typeof(global::Shield.App.Views.AlarmsTableViewPage);
            _typeTable[98] = typeof(global::Shield.App.ViewModels.AlarmsTableViewViewModel);
            _typeTable[99] = typeof(global::Microsoft.UI.Xaml.Controls.DropDownButton);
            _typeTable[100] = typeof(global::Microsoft.UI.Xaml.Controls.Button);
            _typeTable[101] = typeof(global::Shield.App.Views.ContractsPage);
            _typeTable[102] = typeof(global::Shield.App.ViewModels.ContractsViewModel);
            _typeTable[103] = typeof(global::Shield.App.Views.ProfilePage);
            _typeTable[104] = typeof(global::Shield.DataAccess.DTOs.ProfileInfoDto);
            _typeTable[105] = typeof(global::Shield.App.Helpers.EnumToBooleanConverter);
            _typeTable[106] = typeof(global::Shield.App.Views.SettingsPage);
            _typeTable[107] = typeof(global::Shield.App.ViewModels.SettingsViewModel);
            _typeTable[108] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationView);
            _typeTable[109] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible);
            _typeTable[110] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[111] = typeof(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox);
            _typeTable[112] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[113] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode);
            _typeTable[114] = typeof(global::Microsoft.UI.Xaml.Controls.StyleSelector);
            _typeTable[115] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode);
            _typeTable[116] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode);
            _typeTable[117] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus);
            _typeTable[118] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled);
            _typeTable[119] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings);
            _typeTable[120] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[121] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[122] = typeof(global::Microsoft.UI.Xaml.DependencyObjectCollection);
            _typeTable[123] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTip);
            _typeTable[124] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode);
            _typeTable[125] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[126] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode);
            _typeTable[127] = typeof(global::Microsoft.UI.Xaml.Controls.IconSource);
            _typeTable[128] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility);
            _typeTable[129] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings);
            _typeTable[130] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItem);
            _typeTable[131] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase);
            _typeTable[132] = typeof(global::Microsoft.UI.Xaml.Controls.IconElement);
            _typeTable[133] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBadge);
            _typeTable[134] = typeof(global::Shield.App.Helpers.NavigationHelper);
            _typeTable[135] = typeof(global::Shield.App.Behaviors.NavigationViewHeaderBehavior);
            _typeTable[136] = typeof(global::Microsoft.Xaml.Interactivity.Behavior<global::Microsoft.UI.Xaml.Controls.NavigationView>);
            _typeTable[137] = typeof(global::Microsoft.Xaml.Interactivity.Behavior);
            _typeTable[138] = typeof(global::Shield.App.Behaviors.NavigationViewHeaderMode);
            _typeTable[139] = typeof(global::Shield.App.Views.ShellPage);
            _typeTable[140] = typeof(global::Shield.App.ViewModels.ShellViewModel);
            _typeTable[141] = typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode);
            _typeTable[142] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_Expander() { return new global::Microsoft.UI.Xaml.Controls.Expander(); }
        private object Activate_13_AlarmControl() { return new global::Shield.App.Controls.AlarmControl(); }
        private object Activate_20_AttachedCardShadow() { return new global::CommunityToolkit.WinUI.Media.AttachedCardShadow(); }
        private object Activate_27_ContractControl() { return new global::Shield.App.Controls.ContractControl(); }
        private object Activate_29_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Controls.TextBlock>(); }
        private object Activate_30_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Microsoft.UI.Xaml.Controls.TextBlock>(); }
        private object Activate_32_PlanDto() { return new global::Shield.DataAccess.DTOs.PlanDto(); }
        private object Activate_33_PictureDto() { return new global::Shield.DataAccess.DTOs.PictureDto(); }
        private object Activate_35_List() { return new global::System.Collections.Generic.List<global::Shield.DataAccess.DTOs.AlarmDto>(); }
        private object Activate_36_AlarmDto() { return new global::Shield.DataAccess.DTOs.AlarmDto(); }
        private object Activate_39_ContractDto() { return new global::Shield.DataAccess.DTOs.ContractDto(); }
        private object Activate_41_RegisterContent() { return new global::Shield.App.Controls.RegisterContent(); }
        private object Activate_42_RegisterLoginContent() { return new global::Shield.App.Controls.RegisterLoginContent(); }
        private object Activate_43_RemovableTextBox() { return new global::Shield.App.Controls.RemovableTextBox(); }
        private object Activate_44_WebView2() { return new global::Microsoft.UI.Xaml.Controls.WebView2(); }
        private object Activate_47_CreateContractDialog() { return new global::Shield.App.Dialogs.CreateContractDialog(); }
        private object Activate_48_List() { return new global::System.Collections.Generic.List<global::System.String>(); }
        private object Activate_49_WindowEx() { return new global::WinUIEx.WindowEx(); }
        private object Activate_57_MicaBackdrop() { return new global::Microsoft.UI.Xaml.Media.MicaBackdrop(); }
        private object Activate_60_MainWindow() { return new global::Shield.App.MainWindow(); }
        private object Activate_63_AlarmsPage() { return new global::Shield.App.Views.AlarmsPage(); }
        private object Activate_65_AlarmsViewModel() { return new global::Shield.App.ViewModels.AlarmsViewModel(); }
        private object Activate_68_DataGrid() { return new global::CommunityToolkit.WinUI.UI.Controls.DataGrid(); }
        private object Activate_74_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn>(); }
        private object Activate_75_Collection() { return new global::System.Collections.ObjectModel.Collection<global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn>(); }
        private object Activate_88_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Style>(); }
        private object Activate_89_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Microsoft.UI.Xaml.Style>(); }
        private object Activate_91_DataGridRow() { return new global::CommunityToolkit.WinUI.UI.Controls.DataGridRow(); }
        private object Activate_92_DataGridTextColumn() { return new global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn(); }
        private object Activate_97_AlarmsTableViewPage() { return new global::Shield.App.Views.AlarmsTableViewPage(); }
        private object Activate_98_AlarmsTableViewViewModel() { return new global::Shield.App.ViewModels.AlarmsTableViewViewModel(); }
        private object Activate_99_DropDownButton() { return new global::Microsoft.UI.Xaml.Controls.DropDownButton(); }
        private object Activate_101_ContractsPage() { return new global::Shield.App.Views.ContractsPage(); }
        private object Activate_102_ContractsViewModel() { return new global::Shield.App.ViewModels.ContractsViewModel(); }
        private object Activate_103_ProfilePage() { return new global::Shield.App.Views.ProfilePage(); }
        private object Activate_104_ProfileInfoDto() { return new global::Shield.DataAccess.DTOs.ProfileInfoDto(); }
        private object Activate_105_EnumToBooleanConverter() { return new global::Shield.App.Helpers.EnumToBooleanConverter(); }
        private object Activate_106_SettingsPage() { return new global::Shield.App.Views.SettingsPage(); }
        private object Activate_108_NavigationView() { return new global::Microsoft.UI.Xaml.Controls.NavigationView(); }
        private object Activate_119_NavigationViewTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings(); }
        private object Activate_121_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_123_TeachingTip() { return new global::Microsoft.UI.Xaml.Controls.TeachingTip(); }
        private object Activate_129_TeachingTipTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings(); }
        private object Activate_130_NavigationViewItem() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewItem(); }
        private object Activate_133_InfoBadge() { return new global::Microsoft.UI.Xaml.Controls.InfoBadge(); }
        private object Activate_134_NavigationHelper() { return new global::Shield.App.Helpers.NavigationHelper(); }
        private object Activate_135_NavigationViewHeaderBehavior() { return new global::Shield.App.Behaviors.NavigationViewHeaderBehavior(); }
        private object Activate_141_TreeViewNode() { return new global::Microsoft.UI.Xaml.Controls.TreeViewNode(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_29_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TextBlock>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TextBlock)item;
            collection.Add(newItem);
        }
        private void VectorAdd_30_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TextBlock>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TextBlock)item;
            collection.Add(newItem);
        }
        private void VectorAdd_35_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Shield.DataAccess.DTOs.AlarmDto>)instance;
            var newItem = (global::Shield.DataAccess.DTOs.AlarmDto)item;
            collection.Add(newItem);
        }
        private void VectorAdd_48_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_74_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn>)instance;
            var newItem = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)item;
            collection.Add(newItem);
        }
        private void VectorAdd_75_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn>)instance;
            var newItem = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)item;
            collection.Add(newItem);
        }
        private void VectorAdd_88_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Style>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Style)item;
            collection.Add(newItem);
        }
        private void VectorAdd_89_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Style>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Style)item;
            collection.Add(newItem);
        }
        private void VectorAdd_110_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_121_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Microsoft.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_142_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TreeViewNode>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Microsoft.UI.Xaml.Controls.Expander
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_4_Expander;
                userType.AddMemberName("Header");
                userType.AddMemberName("ExpandDirection");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("HeaderTemplateSelector");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Microsoft.UI.Xaml.Controls.ExpandDirection
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Down", global::Microsoft.UI.Xaml.Controls.ExpandDirection.Down);
                userType.AddEnumValue("Up", global::Microsoft.UI.Xaml.Controls.ExpandDirection.Up);
                xamlType = userType;
                break;

            case 7:   //  System.Enum
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 8:   //  System.ValueType
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 9:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Shield.App.Controls.AlarmControl
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_13_AlarmControl;
                userType.AddMemberName("Bailee");
                userType.AddMemberName("Address");
                userType.AddMemberName("Result");
                userType.AddMemberName("DateTime");
                userType.AddMemberName("DateOnly");
                userType.AddMemberName("TimeOnly");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  String
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Shield.DataAccess.Enums.AlarmResult
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("False", global::Shield.DataAccess.Enums.AlarmResult.False);
                userType.AddEnumValue("Robbery", global::Shield.DataAccess.Enums.AlarmResult.Robbery);
                xamlType = userType;
                break;

            case 17:   //  System.DateTime
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 18:   //  System.DateOnly
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  System.TimeOnly
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  CommunityToolkit.WinUI.Media.AttachedCardShadow
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.AttachedShadowBase"));
                userType.Activator = Activate_20_AttachedCardShadow;
                userType.AddMemberName("CornerRadius");
                userType.AddMemberName("InnerContentClipMode");
                xamlType = userType;
                break;

            case 21:   //  CommunityToolkit.WinUI.AttachedShadowBase
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Offset");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("BlurRadius");
                userType.AddMemberName("Color");
                xamlType = userType;
                break;

            case 22:   //  Double
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  CommunityToolkit.WinUI.Media.InnerContentClipMode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::CommunityToolkit.WinUI.Media.InnerContentClipMode.None);
                userType.AddEnumValue("CompositionMaskBrush", global::CommunityToolkit.WinUI.Media.InnerContentClipMode.CompositionMaskBrush);
                userType.AddEnumValue("CompositionGeometricClip", global::CommunityToolkit.WinUI.Media.InnerContentClipMode.CompositionGeometricClip);
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Color
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  CommunityToolkit.WinUI.Effects
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Shadow");
                xamlType = userType;
                break;

            case 26:   //  Microsoft.UI.Xaml.FrameworkElement
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Shield.App.Controls.ContractControl
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_27_ContractControl;
                userType.AddMemberName("ContractId");
                userType.AddMemberName("Address");
                userType.AddMemberName("OwnersString");
                userType.AddMemberName("OwnersControls");
                userType.AddMemberName("Bailee");
                userType.AddMemberName("Comment");
                userType.AddMemberName("Organization");
                userType.AddMemberName("IsLegalEntity");
                userType.AddMemberName("Plan");
                userType.AddMemberName("Picture");
                userType.AddMemberName("Bitmap");
                userType.AddMemberName("Date");
                userType.AddMemberName("Alarms");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Int32
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  System.Collections.ObjectModel.ObservableCollection`1<Microsoft.UI.Xaml.Controls.TextBlock>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Microsoft.UI.Xaml.Controls.TextBlock>"));
                userType.CollectionAdd = VectorAdd_29_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  System.Collections.ObjectModel.Collection`1<Microsoft.UI.Xaml.Controls.TextBlock>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_30_Collection;
                userType.CollectionAdd = VectorAdd_30_Collection;
                xamlType = userType;
                break;

            case 31:   //  Microsoft.UI.Xaml.Controls.TextBlock
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Shield.DataAccess.DTOs.PlanDto
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  Shield.DataAccess.DTOs.PictureDto
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  Microsoft.UI.Xaml.Media.Imaging.BitmapImage
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  System.Collections.Generic.List`1<Shield.DataAccess.DTOs.AlarmDto>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_35_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Shield.DataAccess.DTOs.AlarmDto
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_36_AlarmDto;
                userType.AddMemberName("AlarmId");
                userType.AddMemberName("Date");
                userType.AddMemberName("Contract");
                userType.AddMemberName("Result");
                userType.AddMemberName("Organization");
                userType.AddMemberName("Address");
                userType.AddMemberName("ResultLocalizationTag");
                xamlType = userType;
                break;

            case 37:   //  System.Nullable`1<Int32>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Int32"));
                userType.BoxInstance = userType.BoxType<global::System.Int32>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  System.Nullable`1<System.DateTime>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("System.DateTime"));
                userType.BoxInstance = userType.BoxType<global::System.DateTime>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  Shield.DataAccess.DTOs.ContractDto
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  System.Nullable`1<Shield.DataAccess.Enums.AlarmResult>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Shield.DataAccess.Enums.AlarmResult"));
                userType.BoxInstance = userType.BoxType<global::Shield.DataAccess.Enums.AlarmResult>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  Shield.App.Controls.RegisterContent
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_41_RegisterContent;
                userType.AddMemberName("Login");
                userType.AddMemberName("Email");
                userType.AddMemberName("Password");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  Shield.App.Controls.RegisterLoginContent
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_42_RegisterLoginContent;
                userType.AddMemberName("Login");
                userType.AddMemberName("Password");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  Shield.App.Controls.RemovableTextBox
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_43_RemovableTextBox;
                userType.AddMemberName("Value");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  Microsoft.UI.Xaml.Controls.WebView2
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_44_WebView2;
                userType.AddMemberName("CanGoBack");
                userType.AddMemberName("CanGoForward");
                userType.AddMemberName("CoreWebView2");
                userType.AddMemberName("DefaultBackgroundColor");
                userType.AddMemberName("Source");
                xamlType = userType;
                break;

            case 45:   //  Microsoft.Web.WebView2.Core.CoreWebView2
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  System.Uri
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  Shield.App.Dialogs.CreateContractDialog
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_47_CreateContractDialog;
                userType.AddMemberName("PlanPath");
                userType.AddMemberName("PhotoPath");
                userType.AddMemberName("Bailee");
                userType.AddMemberName("Address");
                userType.AddMemberName("Comment");
                userType.AddMemberName("Organization");
                userType.AddMemberName("IsLegalEntity");
                userType.AddMemberName("Owners");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  System.Collections.Generic.List`1<String>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_48_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 49:   //  WinUIEx.WindowEx
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_49_WindowEx;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.AddMemberName("WindowContent");
                userType.AddMemberName("MinWidth");
                userType.AddMemberName("MinHeight");
                userType.AddMemberName("PersistenceId");
                userType.AddMemberName("AppWindow");
                userType.AddMemberName("TaskBarIcon");
                userType.AddMemberName("Title");
                userType.AddMemberName("IsTitleBarVisible");
                userType.AddMemberName("IsMinimizable");
                userType.AddMemberName("IsMaximizable");
                userType.AddMemberName("IsResizable");
                userType.AddMemberName("WindowState");
                userType.AddMemberName("IsShownInSwitchers");
                userType.AddMemberName("IsAlwaysOnTop");
                userType.AddMemberName("Presenter");
                userType.AddMemberName("PresenterKind");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("MaxWidth");
                userType.AddMemberName("MaxHeight");
                userType.AddMemberName("Backdrop");
                xamlType = userType;
                break;

            case 50:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  Microsoft.UI.Windowing.AppWindow
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 52:   //  WinUIEx.Icon
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CreateFromStringMethod = global::WinUIEx.Icon.FromFile;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  WinUIEx.WindowState
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::WinUIEx.WindowState.Normal);
                userType.AddEnumValue("Minimized", global::WinUIEx.WindowState.Minimized);
                userType.AddEnumValue("Maximized", global::WinUIEx.WindowState.Maximized);
                xamlType = userType;
                break;

            case 54:   //  Microsoft.UI.Windowing.AppWindowPresenter
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 55:   //  Microsoft.UI.Windowing.AppWindowPresenterKind
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Default);
                userType.AddEnumValue("CompactOverlay", global::Microsoft.UI.Windowing.AppWindowPresenterKind.CompactOverlay);
                userType.AddEnumValue("FullScreen", global::Microsoft.UI.Windowing.AppWindowPresenterKind.FullScreen);
                userType.AddEnumValue("Overlapped", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Overlapped);
                xamlType = userType;
                break;

            case 56:   //  WinUIEx.SystemBackdrop
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 57:   //  Microsoft.UI.Xaml.Media.MicaBackdrop
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Media.SystemBackdrop"));
                userType.Activator = Activate_57_MicaBackdrop;
                userType.AddMemberName("Kind");
                xamlType = userType;
                break;

            case 58:   //  Microsoft.UI.Xaml.Media.SystemBackdrop
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  Microsoft.UI.Composition.SystemBackdrops.MicaKind
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Base", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.Base);
                userType.AddEnumValue("BaseAlt", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.BaseAlt);
                xamlType = userType;
                break;

            case 60:   //  Shield.App.MainWindow
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.Activator = Activate_60_MainWindow;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 61:   //  Microsoft.UI.Xaml.Thickness
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Left");
                userType.AddMemberName("Top");
                userType.AddMemberName("Right");
                userType.AddMemberName("Bottom");
                xamlType = userType;
                break;

            case 62:   //  Microsoft.UI.Xaml.CornerRadius
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("TopLeft");
                userType.AddMemberName("TopRight");
                userType.AddMemberName("BottomRight");
                userType.AddMemberName("BottomLeft");
                xamlType = userType;
                break;

            case 63:   //  Shield.App.Views.AlarmsPage
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_63_AlarmsPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 64:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 65:   //  Shield.App.ViewModels.AlarmsViewModel
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 66:   //  CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableObject"));
                xamlType = userType;
                break;

            case 67:   //  CommunityToolkit.Mvvm.ComponentModel.ObservableObject
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 68:   //  CommunityToolkit.WinUI.UI.Controls.DataGrid
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_68_DataGrid;
                userType.AddMemberName("AutoGenerateColumns");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("GridLinesVisibility");
                userType.AddMemberName("AlternatingRowBackground");
                userType.AddMemberName("CanUserSortColumns");
                userType.AddMemberName("RowStyle");
                userType.AddMemberName("Columns");
                userType.AddMemberName("AlternatingRowForeground");
                userType.AddMemberName("AreRowDetailsFrozen");
                userType.AddMemberName("AreRowGroupHeadersFrozen");
                userType.AddMemberName("CanUserReorderColumns");
                userType.AddMemberName("CanUserResizeColumns");
                userType.AddMemberName("CellStyle");
                userType.AddMemberName("ClipboardCopyMode");
                userType.AddMemberName("ColumnHeaderHeight");
                userType.AddMemberName("ColumnHeaderStyle");
                userType.AddMemberName("ColumnWidth");
                userType.AddMemberName("DataFetchSize");
                userType.AddMemberName("DragIndicatorStyle");
                userType.AddMemberName("DropLocationIndicatorStyle");
                userType.AddMemberName("FrozenColumnCount");
                userType.AddMemberName("HeadersVisibility");
                userType.AddMemberName("HorizontalGridLinesBrush");
                userType.AddMemberName("HorizontalScrollBarVisibility");
                userType.AddMemberName("IsReadOnly");
                userType.AddMemberName("IsValid");
                userType.AddMemberName("IncrementalLoadingThreshold");
                userType.AddMemberName("IncrementalLoadingTrigger");
                userType.AddMemberName("MaxColumnWidth");
                userType.AddMemberName("MinColumnWidth");
                userType.AddMemberName("RowBackground");
                userType.AddMemberName("RowDetailsTemplate");
                userType.AddMemberName("RowDetailsVisibilityMode");
                userType.AddMemberName("RowForeground");
                userType.AddMemberName("RowHeight");
                userType.AddMemberName("RowHeaderWidth");
                userType.AddMemberName("RowHeaderStyle");
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("VerticalGridLinesBrush");
                userType.AddMemberName("VerticalScrollBarVisibility");
                userType.AddMemberName("CurrentColumn");
                userType.AddMemberName("RowGroupHeaderPropertyNameAlternative");
                userType.AddMemberName("RowGroupHeaderStyles");
                userType.AddMemberName("SelectedItems");
                xamlType = userType;
                break;

            case 69:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 70:   //  System.Collections.IEnumerable
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 71:   //  CommunityToolkit.WinUI.UI.Controls.DataGridGridLinesVisibility
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::CommunityToolkit.WinUI.UI.Controls.DataGridGridLinesVisibility.None);
                userType.AddEnumValue("Horizontal", global::CommunityToolkit.WinUI.UI.Controls.DataGridGridLinesVisibility.Horizontal);
                userType.AddEnumValue("Vertical", global::CommunityToolkit.WinUI.UI.Controls.DataGridGridLinesVisibility.Vertical);
                userType.AddEnumValue("All", global::CommunityToolkit.WinUI.UI.Controls.DataGridGridLinesVisibility.All);
                xamlType = userType;
                break;

            case 72:   //  Microsoft.UI.Xaml.Media.Brush
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 73:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 74:   //  System.Collections.ObjectModel.ObservableCollection`1<CommunityToolkit.WinUI.UI.Controls.DataGridColumn>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<CommunityToolkit.WinUI.UI.Controls.DataGridColumn>"));
                userType.CollectionAdd = VectorAdd_74_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 75:   //  System.Collections.ObjectModel.Collection`1<CommunityToolkit.WinUI.UI.Controls.DataGridColumn>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_75_Collection;
                userType.CollectionAdd = VectorAdd_75_Collection;
                xamlType = userType;
                break;

            case 76:   //  CommunityToolkit.WinUI.UI.Controls.DataGridColumn
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.AddMemberName("ActualWidth");
                userType.AddMemberName("CanUserReorder");
                userType.AddMemberName("CanUserResize");
                userType.AddMemberName("CanUserSort");
                userType.AddMemberName("CellStyle");
                userType.AddMemberName("ClipboardContentBinding");
                userType.AddMemberName("DisplayIndex");
                userType.AddMemberName("DragIndicatorStyle");
                userType.AddMemberName("HeaderStyle");
                userType.AddMemberName("Header");
                userType.AddMemberName("IsAutoGenerated");
                userType.AddMemberName("IsFrozen");
                userType.AddMemberName("IsReadOnly");
                userType.AddMemberName("MaxWidth");
                userType.AddMemberName("MinWidth");
                userType.AddMemberName("SortDirection");
                userType.AddMemberName("Tag");
                userType.AddMemberName("Visibility");
                userType.AddMemberName("Width");
                xamlType = userType;
                break;

            case 77:   //  Microsoft.UI.Xaml.Data.Binding
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 78:   //  System.Nullable`1<CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection"));
                userType.BoxInstance = userType.BoxType<global::CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 79:   //  CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Ascending", global::CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection.Ascending);
                userType.AddEnumValue("Descending", global::CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection.Descending);
                xamlType = userType;
                break;

            case 80:   //  Microsoft.UI.Xaml.Visibility
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 81:   //  CommunityToolkit.WinUI.UI.Controls.DataGridLength
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.CreateFromStringMethod = x => (global::System.Object)global::CommunityToolkit.WinUI.UI.Controls.DataGridLength.ConvertFromString(x);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 82:   //  CommunityToolkit.WinUI.UI.Controls.DataGridClipboardCopyMode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::CommunityToolkit.WinUI.UI.Controls.DataGridClipboardCopyMode.None);
                userType.AddEnumValue("ExcludeHeader", global::CommunityToolkit.WinUI.UI.Controls.DataGridClipboardCopyMode.ExcludeHeader);
                userType.AddEnumValue("IncludeHeader", global::CommunityToolkit.WinUI.UI.Controls.DataGridClipboardCopyMode.IncludeHeader);
                xamlType = userType;
                break;

            case 83:   //  CommunityToolkit.WinUI.UI.Controls.DataGridHeadersVisibility
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::CommunityToolkit.WinUI.UI.Controls.DataGridHeadersVisibility.None);
                userType.AddEnumValue("Column", global::CommunityToolkit.WinUI.UI.Controls.DataGridHeadersVisibility.Column);
                userType.AddEnumValue("Row", global::CommunityToolkit.WinUI.UI.Controls.DataGridHeadersVisibility.Row);
                userType.AddEnumValue("All", global::CommunityToolkit.WinUI.UI.Controls.DataGridHeadersVisibility.All);
                xamlType = userType;
                break;

            case 84:   //  Microsoft.UI.Xaml.Controls.ScrollBarVisibility
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 85:   //  Microsoft.UI.Xaml.Controls.IncrementalLoadingTrigger
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 86:   //  CommunityToolkit.WinUI.UI.Controls.DataGridRowDetailsVisibilityMode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("VisibleWhenSelected", global::CommunityToolkit.WinUI.UI.Controls.DataGridRowDetailsVisibilityMode.VisibleWhenSelected);
                userType.AddEnumValue("Visible", global::CommunityToolkit.WinUI.UI.Controls.DataGridRowDetailsVisibilityMode.Visible);
                userType.AddEnumValue("Collapsed", global::CommunityToolkit.WinUI.UI.Controls.DataGridRowDetailsVisibilityMode.Collapsed);
                xamlType = userType;
                break;

            case 87:   //  CommunityToolkit.WinUI.UI.Controls.DataGridSelectionMode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Extended", global::CommunityToolkit.WinUI.UI.Controls.DataGridSelectionMode.Extended);
                userType.AddEnumValue("Single", global::CommunityToolkit.WinUI.UI.Controls.DataGridSelectionMode.Single);
                xamlType = userType;
                break;

            case 88:   //  System.Collections.ObjectModel.ObservableCollection`1<Microsoft.UI.Xaml.Style>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Microsoft.UI.Xaml.Style>"));
                userType.CollectionAdd = VectorAdd_88_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 89:   //  System.Collections.ObjectModel.Collection`1<Microsoft.UI.Xaml.Style>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_89_Collection;
                userType.CollectionAdd = VectorAdd_89_Collection;
                xamlType = userType;
                break;

            case 90:   //  System.Collections.IList
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 91:   //  CommunityToolkit.WinUI.UI.Controls.DataGridRow
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_91_DataGridRow;
                userType.AddMemberName("DetailsTemplate");
                userType.AddMemberName("DetailsVisibility");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderStyle");
                userType.AddMemberName("IsValid");
                xamlType = userType;
                break;

            case 92:   //  CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn"));
                userType.Activator = Activate_92_DataGridTextColumn;
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontSize");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("Foreground");
                xamlType = userType;
                break;

            case 93:   //  CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn"));
                userType.AddMemberName("Binding");
                userType.AddMemberName("ClipboardContentBinding");
                userType.AddMemberName("EditingElementStyle");
                userType.AddMemberName("ElementStyle");
                xamlType = userType;
                break;

            case 94:   //  Microsoft.UI.Xaml.Media.FontFamily
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 95:   //  Windows.UI.Text.FontStyle
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 96:   //  Windows.UI.Text.FontWeight
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 97:   //  Shield.App.Views.AlarmsTableViewPage
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_97_AlarmsTableViewPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 98:   //  Shield.App.ViewModels.AlarmsTableViewViewModel
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 99:   //  Microsoft.UI.Xaml.Controls.DropDownButton
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_99_DropDownButton;
                xamlType = userType;
                break;

            case 100:   //  Microsoft.UI.Xaml.Controls.Button
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 101:   //  Shield.App.Views.ContractsPage
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_101_ContractsPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 102:   //  Shield.App.ViewModels.ContractsViewModel
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 103:   //  Shield.App.Views.ProfilePage
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_103_ProfilePage;
                userType.AddMemberName("IsLoggedIn");
                userType.AddMemberName("IsNotLoggedIn");
                userType.AddMemberName("Profile");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 104:   //  Shield.DataAccess.DTOs.ProfileInfoDto
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 105:   //  Shield.App.Helpers.EnumToBooleanConverter
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_105_EnumToBooleanConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 106:   //  Shield.App.Views.SettingsPage
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_106_SettingsPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 107:   //  Shield.App.ViewModels.SettingsViewModel
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 108:   //  Microsoft.UI.Xaml.Controls.NavigationView
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_108_NavigationView;
                userType.AddMemberName("IsBackButtonVisible");
                userType.AddMemberName("IsBackEnabled");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("IsSettingsVisible");
                userType.AddMemberName("ExpandedModeThresholdWidth");
                userType.AddMemberName("Header");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("FooterMenuItems");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("AlwaysShowHeader");
                userType.AddMemberName("AutoSuggestBox");
                userType.AddMemberName("CompactModeThresholdWidth");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("ContentOverlay");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("FooterMenuItemsSource");
                userType.AddMemberName("IsPaneOpen");
                userType.AddMemberName("IsPaneToggleButtonVisible");
                userType.AddMemberName("IsPaneVisible");
                userType.AddMemberName("IsTitleBarAutoPaddingEnabled");
                userType.AddMemberName("MenuItemContainerStyle");
                userType.AddMemberName("MenuItemContainerStyleSelector");
                userType.AddMemberName("MenuItemTemplate");
                userType.AddMemberName("MenuItemTemplateSelector");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("OpenPaneLength");
                userType.AddMemberName("OverflowLabelMode");
                userType.AddMemberName("PaneCustomContent");
                userType.AddMemberName("PaneDisplayMode");
                userType.AddMemberName("PaneFooter");
                userType.AddMemberName("PaneHeader");
                userType.AddMemberName("PaneTitle");
                userType.AddMemberName("PaneToggleButtonStyle");
                userType.AddMemberName("SelectionFollowsFocus");
                userType.AddMemberName("SettingsItem");
                userType.AddMemberName("ShoulderNavigationEnabled");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 109:   //  Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Collapsed);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Visible);
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Auto);
                xamlType = userType;
                break;

            case 110:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_110_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 111:   //  Microsoft.UI.Xaml.Controls.AutoSuggestBox
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 112:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 113:   //  Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Minimal", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Minimal);
                userType.AddEnumValue("Compact", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Compact);
                userType.AddEnumValue("Expanded", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Expanded);
                xamlType = userType;
                break;

            case 114:   //  Microsoft.UI.Xaml.Controls.StyleSelector
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 115:   //  Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MoreLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.MoreLabel);
                userType.AddEnumValue("NoLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.NoLabel);
                xamlType = userType;
                break;

            case 116:   //  Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Auto);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Left);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Top);
                userType.AddEnumValue("LeftCompact", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftCompact);
                userType.AddEnumValue("LeftMinimal", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftMinimal);
                xamlType = userType;
                break;

            case 117:   //  Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Disabled);
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Enabled);
                xamlType = userType;
                break;

            case 118:   //  Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("WhenSelectionFollowsFocus", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus);
                userType.AddEnumValue("Always", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Always);
                userType.AddEnumValue("Never", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Never);
                xamlType = userType;
                break;

            case 119:   //  Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 120:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 121:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_121_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 122:   //  Microsoft.UI.Xaml.DependencyObjectCollection
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 123:   //  Microsoft.UI.Xaml.Controls.TeachingTip
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_123_TeachingTip;
                userType.AddMemberName("Title");
                userType.AddMemberName("Subtitle");
                userType.AddMemberName("PreferredPlacement");
                userType.AddMemberName("PlacementMargin");
                userType.AddMemberName("IsLightDismissEnabled");
                userType.AddMemberName("ActionButtonCommand");
                userType.AddMemberName("ActionButtonCommandParameter");
                userType.AddMemberName("ActionButtonContent");
                userType.AddMemberName("ActionButtonStyle");
                userType.AddMemberName("CloseButtonCommand");
                userType.AddMemberName("CloseButtonCommandParameter");
                userType.AddMemberName("CloseButtonContent");
                userType.AddMemberName("CloseButtonStyle");
                userType.AddMemberName("HeroContent");
                userType.AddMemberName("HeroContentPlacement");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("ShouldConstrainToRootBounds");
                userType.AddMemberName("TailVisibility");
                userType.AddMemberName("Target");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 124:   //  Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Auto);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Top);
                userType.AddEnumValue("Bottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Bottom);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Left);
                userType.AddEnumValue("Right", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Right);
                userType.AddEnumValue("TopRight", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.TopRight);
                userType.AddEnumValue("TopLeft", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.TopLeft);
                userType.AddEnumValue("BottomRight", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.BottomRight);
                userType.AddEnumValue("BottomLeft", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.BottomLeft);
                userType.AddEnumValue("LeftTop", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.LeftTop);
                userType.AddEnumValue("LeftBottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.LeftBottom);
                userType.AddEnumValue("RightTop", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.RightTop);
                userType.AddEnumValue("RightBottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.RightBottom);
                userType.AddEnumValue("Center", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Center);
                xamlType = userType;
                break;

            case 125:   //  System.Windows.Input.ICommand
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 126:   //  Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Auto);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Top);
                userType.AddEnumValue("Bottom", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Bottom);
                xamlType = userType;
                break;

            case 127:   //  Microsoft.UI.Xaml.Controls.IconSource
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 128:   //  Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Auto);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Visible);
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Collapsed);
                xamlType = userType;
                break;

            case 129:   //  Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 130:   //  Microsoft.UI.Xaml.Controls.NavigationViewItem
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"));
                userType.Activator = Activate_130_NavigationViewItem;
                userType.AddMemberName("Icon");
                userType.AddMemberName("SelectsOnInvoked");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("InfoBadge");
                userType.AddMemberName("IsChildSelected");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("MenuItemsSource");
                xamlType = userType;
                break;

            case 131:   //  Microsoft.UI.Xaml.Controls.NavigationViewItemBase
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 132:   //  Microsoft.UI.Xaml.Controls.IconElement
                xamlType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 133:   //  Microsoft.UI.Xaml.Controls.InfoBadge
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 134:   //  Shield.App.Helpers.NavigationHelper
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_134_NavigationHelper;
                userType.AddMemberName("NavigateTo");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 135:   //  Shield.App.Behaviors.NavigationViewHeaderBehavior
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior`1<Microsoft.UI.Xaml.Controls.NavigationView>"));
                userType.Activator = Activate_135_NavigationViewHeaderBehavior;
                userType.AddMemberName("DefaultHeader");
                userType.AddMemberName("DefaultHeaderTemplate");
                userType.AddMemberName("HeaderMode");
                userType.AddMemberName("HeaderContext");
                userType.AddMemberName("HeaderTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 136:   //  Microsoft.Xaml.Interactivity.Behavior`1<Microsoft.UI.Xaml.Controls.NavigationView>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 137:   //  Microsoft.Xaml.Interactivity.Behavior
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 138:   //  Shield.App.Behaviors.NavigationViewHeaderMode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Always", global::Shield.App.Behaviors.NavigationViewHeaderMode.Always);
                userType.AddEnumValue("Never", global::Shield.App.Behaviors.NavigationViewHeaderMode.Never);
                userType.AddEnumValue("Minimal", global::Shield.App.Behaviors.NavigationViewHeaderMode.Minimal);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 139:   //  Shield.App.Views.ShellPage
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 140:   //  Shield.App.ViewModels.ShellViewModel
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 141:   //  Microsoft.UI.Xaml.Controls.TreeViewNode
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_141_TreeViewNode;
                userType.AddMemberName("Children");
                userType.AddMemberName("Content");
                userType.AddMemberName("Depth");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Parent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 142:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
                userType = new global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_142_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::CommunityToolkit.WinUI.UI.Controls.CommunityToolkit_WinUI_UI_Controls_DataGrid_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_Expander_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.Header;
        }
        private void set_1_Expander_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_2_Expander_ExpandDirection(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.ExpandDirection;
        }
        private void set_2_Expander_ExpandDirection(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.ExpandDirection = (global::Microsoft.UI.Xaml.Controls.ExpandDirection)Value;
        }
        private object get_3_Expander_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.HeaderTemplate;
        }
        private void set_3_Expander_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_4_Expander_HeaderTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.HeaderTemplateSelector;
        }
        private void set_4_Expander_HeaderTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.HeaderTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_5_Expander_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.IsExpanded;
        }
        private void set_5_Expander_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_6_Expander_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.TemplateSettings;
        }
        private object get_7_AlarmControl_Bailee(object instance)
        {
            var that = (global::Shield.App.Controls.AlarmControl)instance;
            return that.Bailee;
        }
        private void set_7_AlarmControl_Bailee(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.AlarmControl)instance;
            that.Bailee = (global::System.String)Value;
        }
        private object get_8_AlarmControl_Address(object instance)
        {
            var that = (global::Shield.App.Controls.AlarmControl)instance;
            return that.Address;
        }
        private void set_8_AlarmControl_Address(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.AlarmControl)instance;
            that.Address = (global::System.String)Value;
        }
        private object get_9_AlarmControl_Result(object instance)
        {
            var that = (global::Shield.App.Controls.AlarmControl)instance;
            return that.Result;
        }
        private void set_9_AlarmControl_Result(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.AlarmControl)instance;
            that.Result = (global::Shield.DataAccess.Enums.AlarmResult)Value;
        }
        private object get_10_AlarmControl_DateTime(object instance)
        {
            var that = (global::Shield.App.Controls.AlarmControl)instance;
            return that.DateTime;
        }
        private void set_10_AlarmControl_DateTime(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.AlarmControl)instance;
            that.DateTime = (global::System.DateTime)Value;
        }
        private object get_11_AlarmControl_DateOnly(object instance)
        {
            var that = (global::Shield.App.Controls.AlarmControl)instance;
            return that.DateOnly;
        }
        private object get_12_AlarmControl_TimeOnly(object instance)
        {
            var that = (global::Shield.App.Controls.AlarmControl)instance;
            return that.TimeOnly;
        }
        private object get_13_AttachedShadowBase_Offset(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.AttachedShadowBase)instance;
            return that.Offset;
        }
        private void set_13_AttachedShadowBase_Offset(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.AttachedShadowBase)instance;
            that.Offset = (global::System.String)Value;
        }
        private object get_14_AttachedShadowBase_Opacity(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.AttachedShadowBase)instance;
            return that.Opacity;
        }
        private void set_14_AttachedShadowBase_Opacity(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.AttachedShadowBase)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_15_AttachedCardShadow_CornerRadius(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Media.AttachedCardShadow)instance;
            return that.CornerRadius;
        }
        private void set_15_AttachedCardShadow_CornerRadius(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Media.AttachedCardShadow)instance;
            that.CornerRadius = (global::System.Double)Value;
        }
        private object get_16_AttachedCardShadow_InnerContentClipMode(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Media.AttachedCardShadow)instance;
            return that.InnerContentClipMode;
        }
        private void set_16_AttachedCardShadow_InnerContentClipMode(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Media.AttachedCardShadow)instance;
            that.InnerContentClipMode = (global::CommunityToolkit.WinUI.Media.InnerContentClipMode)Value;
        }
        private object get_17_AttachedShadowBase_BlurRadius(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.AttachedShadowBase)instance;
            return that.BlurRadius;
        }
        private void set_17_AttachedShadowBase_BlurRadius(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.AttachedShadowBase)instance;
            that.BlurRadius = (global::System.Double)Value;
        }
        private object get_18_AttachedShadowBase_Color(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.AttachedShadowBase)instance;
            return that.Color;
        }
        private void set_18_AttachedShadowBase_Color(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.AttachedShadowBase)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_19_Effects_Shadow(object instance)
        {
            return global::CommunityToolkit.WinUI.Effects.GetShadow((global::Microsoft.UI.Xaml.FrameworkElement)instance);
        }
        private void set_19_Effects_Shadow(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.Effects.SetShadow((global::Microsoft.UI.Xaml.FrameworkElement)instance, (global::CommunityToolkit.WinUI.AttachedShadowBase)Value);
        }
        private object get_20_ContractControl_ContractId(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.ContractId;
        }
        private void set_20_ContractControl_ContractId(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.ContractId = (global::System.Int32)Value;
        }
        private object get_21_ContractControl_Address(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.Address;
        }
        private void set_21_ContractControl_Address(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.Address = (global::System.String)Value;
        }
        private object get_22_ContractControl_OwnersString(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.OwnersString;
        }
        private void set_22_ContractControl_OwnersString(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.OwnersString = (global::System.String)Value;
        }
        private object get_23_ContractControl_OwnersControls(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.OwnersControls;
        }
        private void set_23_ContractControl_OwnersControls(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.OwnersControls = (global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Controls.TextBlock>)Value;
        }
        private object get_24_ContractControl_Bailee(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.Bailee;
        }
        private void set_24_ContractControl_Bailee(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.Bailee = (global::System.String)Value;
        }
        private object get_25_ContractControl_Comment(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.Comment;
        }
        private void set_25_ContractControl_Comment(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.Comment = (global::System.String)Value;
        }
        private object get_26_ContractControl_Organization(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.Organization;
        }
        private void set_26_ContractControl_Organization(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.Organization = (global::System.String)Value;
        }
        private object get_27_ContractControl_IsLegalEntity(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.IsLegalEntity;
        }
        private void set_27_ContractControl_IsLegalEntity(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.IsLegalEntity = (global::System.Boolean)Value;
        }
        private object get_28_ContractControl_Plan(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.Plan;
        }
        private void set_28_ContractControl_Plan(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.Plan = (global::Shield.DataAccess.DTOs.PlanDto)Value;
        }
        private object get_29_ContractControl_Picture(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.Picture;
        }
        private void set_29_ContractControl_Picture(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.Picture = (global::Shield.DataAccess.DTOs.PictureDto)Value;
        }
        private object get_30_ContractControl_Bitmap(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.Bitmap;
        }
        private void set_30_ContractControl_Bitmap(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.Bitmap = (global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage)Value;
        }
        private object get_31_ContractControl_Date(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.Date;
        }
        private void set_31_ContractControl_Date(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.Date = (global::System.DateOnly)Value;
        }
        private object get_32_ContractControl_Alarms(object instance)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            return that.Alarms;
        }
        private void set_32_ContractControl_Alarms(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.ContractControl)instance;
            that.Alarms = (global::System.Collections.Generic.List<global::Shield.DataAccess.DTOs.AlarmDto>)Value;
        }
        private object get_33_AlarmDto_AlarmId(object instance)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            return that.AlarmId;
        }
        private void set_33_AlarmDto_AlarmId(object instance, object Value)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            that.AlarmId = (global::System.Nullable<global::System.Int32>)Value;
        }
        private object get_34_AlarmDto_Date(object instance)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            return that.Date;
        }
        private void set_34_AlarmDto_Date(object instance, object Value)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            that.Date = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_35_AlarmDto_Contract(object instance)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            return that.Contract;
        }
        private void set_35_AlarmDto_Contract(object instance, object Value)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            that.Contract = (global::Shield.DataAccess.DTOs.ContractDto)Value;
        }
        private object get_36_AlarmDto_Result(object instance)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            return that.Result;
        }
        private void set_36_AlarmDto_Result(object instance, object Value)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            that.Result = (global::System.Nullable<global::Shield.DataAccess.Enums.AlarmResult>)Value;
        }
        private object get_37_AlarmDto_Organization(object instance)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            return that.Organization;
        }
        private object get_38_AlarmDto_Address(object instance)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            return that.Address;
        }
        private object get_39_AlarmDto_ResultLocalizationTag(object instance)
        {
            var that = (global::Shield.DataAccess.DTOs.AlarmDto)instance;
            return that.ResultLocalizationTag;
        }
        private object get_40_RegisterContent_Login(object instance)
        {
            var that = (global::Shield.App.Controls.RegisterContent)instance;
            return that.Login;
        }
        private object get_41_RegisterContent_Email(object instance)
        {
            var that = (global::Shield.App.Controls.RegisterContent)instance;
            return that.Email;
        }
        private object get_42_RegisterContent_Password(object instance)
        {
            var that = (global::Shield.App.Controls.RegisterContent)instance;
            return that.Password;
        }
        private object get_43_RegisterLoginContent_Login(object instance)
        {
            var that = (global::Shield.App.Controls.RegisterLoginContent)instance;
            return that.Login;
        }
        private object get_44_RegisterLoginContent_Password(object instance)
        {
            var that = (global::Shield.App.Controls.RegisterLoginContent)instance;
            return that.Password;
        }
        private object get_45_RemovableTextBox_Value(object instance)
        {
            var that = (global::Shield.App.Controls.RemovableTextBox)instance;
            return that.Value;
        }
        private void set_45_RemovableTextBox_Value(object instance, object Value)
        {
            var that = (global::Shield.App.Controls.RemovableTextBox)instance;
            that.Value = (global::System.String)Value;
        }
        private object get_46_WebView2_CanGoBack(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            return that.CanGoBack;
        }
        private void set_46_WebView2_CanGoBack(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            that.CanGoBack = (global::System.Boolean)Value;
        }
        private object get_47_WebView2_CanGoForward(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            return that.CanGoForward;
        }
        private void set_47_WebView2_CanGoForward(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            that.CanGoForward = (global::System.Boolean)Value;
        }
        private object get_48_WebView2_CoreWebView2(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            return that.CoreWebView2;
        }
        private object get_49_WebView2_DefaultBackgroundColor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            return that.DefaultBackgroundColor;
        }
        private void set_49_WebView2_DefaultBackgroundColor(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            that.DefaultBackgroundColor = (global::Windows.UI.Color)Value;
        }
        private object get_50_WebView2_Source(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            return that.Source;
        }
        private void set_50_WebView2_Source(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_51_CreateContractDialog_PlanPath(object instance)
        {
            var that = (global::Shield.App.Dialogs.CreateContractDialog)instance;
            return that.PlanPath;
        }
        private void set_51_CreateContractDialog_PlanPath(object instance, object Value)
        {
            var that = (global::Shield.App.Dialogs.CreateContractDialog)instance;
            that.PlanPath = (global::System.String)Value;
        }
        private object get_52_CreateContractDialog_PhotoPath(object instance)
        {
            var that = (global::Shield.App.Dialogs.CreateContractDialog)instance;
            return that.PhotoPath;
        }
        private void set_52_CreateContractDialog_PhotoPath(object instance, object Value)
        {
            var that = (global::Shield.App.Dialogs.CreateContractDialog)instance;
            that.PhotoPath = (global::System.String)Value;
        }
        private object get_53_CreateContractDialog_Bailee(object instance)
        {
            var that = (global::Shield.App.Dialogs.CreateContractDialog)instance;
            return that.Bailee;
        }
        private object get_54_CreateContractDialog_Address(object instance)
        {
            var that = (global::Shield.App.Dialogs.CreateContractDialog)instance;
            return that.Address;
        }
        private object get_55_CreateContractDialog_Comment(object instance)
        {
            var that = (global::Shield.App.Dialogs.CreateContractDialog)instance;
            return that.Comment;
        }
        private object get_56_CreateContractDialog_Organization(object instance)
        {
            var that = (global::Shield.App.Dialogs.CreateContractDialog)instance;
            return that.Organization;
        }
        private object get_57_CreateContractDialog_IsLegalEntity(object instance)
        {
            var that = (global::Shield.App.Dialogs.CreateContractDialog)instance;
            return that.IsLegalEntity;
        }
        private object get_58_CreateContractDialog_Owners(object instance)
        {
            var that = (global::Shield.App.Dialogs.CreateContractDialog)instance;
            return that.Owners;
        }
        private object get_59_WindowEx_WindowContent(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.WindowContent;
        }
        private void set_59_WindowEx_WindowContent(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.WindowContent = (global::System.Object)Value;
        }
        private object get_60_WindowEx_MinWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinWidth;
        }
        private void set_60_WindowEx_MinWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinWidth = (global::System.Double)Value;
        }
        private object get_61_WindowEx_MinHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinHeight;
        }
        private void set_61_WindowEx_MinHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinHeight = (global::System.Double)Value;
        }
        private object get_62_WindowEx_PersistenceId(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PersistenceId;
        }
        private void set_62_WindowEx_PersistenceId(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PersistenceId = (global::System.String)Value;
        }
        private object get_63_WindowEx_AppWindow(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.AppWindow;
        }
        private object get_64_WindowEx_TaskBarIcon(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.TaskBarIcon;
        }
        private void set_64_WindowEx_TaskBarIcon(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.TaskBarIcon = (global::WinUIEx.Icon)Value;
        }
        private object get_65_WindowEx_Title(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Title;
        }
        private void set_65_WindowEx_Title(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_66_WindowEx_IsTitleBarVisible(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsTitleBarVisible;
        }
        private void set_66_WindowEx_IsTitleBarVisible(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsTitleBarVisible = (global::System.Boolean)Value;
        }
        private object get_67_WindowEx_IsMinimizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMinimizable;
        }
        private void set_67_WindowEx_IsMinimizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMinimizable = (global::System.Boolean)Value;
        }
        private object get_68_WindowEx_IsMaximizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMaximizable;
        }
        private void set_68_WindowEx_IsMaximizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMaximizable = (global::System.Boolean)Value;
        }
        private object get_69_WindowEx_IsResizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsResizable;
        }
        private void set_69_WindowEx_IsResizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsResizable = (global::System.Boolean)Value;
        }
        private object get_70_WindowEx_WindowState(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.WindowState;
        }
        private void set_70_WindowEx_WindowState(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.WindowState = (global::WinUIEx.WindowState)Value;
        }
        private object get_71_WindowEx_IsShownInSwitchers(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsShownInSwitchers;
        }
        private void set_71_WindowEx_IsShownInSwitchers(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsShownInSwitchers = (global::System.Boolean)Value;
        }
        private object get_72_WindowEx_IsAlwaysOnTop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsAlwaysOnTop;
        }
        private void set_72_WindowEx_IsAlwaysOnTop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsAlwaysOnTop = (global::System.Boolean)Value;
        }
        private object get_73_WindowEx_Presenter(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Presenter;
        }
        private object get_74_WindowEx_PresenterKind(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PresenterKind;
        }
        private void set_74_WindowEx_PresenterKind(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PresenterKind = (global::Microsoft.UI.Windowing.AppWindowPresenterKind)Value;
        }
        private object get_75_WindowEx_Width(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Width;
        }
        private void set_75_WindowEx_Width(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_76_WindowEx_Height(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Height;
        }
        private void set_76_WindowEx_Height(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_77_WindowEx_MaxWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxWidth;
        }
        private void set_77_WindowEx_MaxWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxWidth = (global::System.Double)Value;
        }
        private object get_78_WindowEx_MaxHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxHeight;
        }
        private void set_78_WindowEx_MaxHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxHeight = (global::System.Double)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_79_WindowEx_Backdrop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Backdrop;
        }
        private void set_79_WindowEx_Backdrop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Backdrop = (global::WinUIEx.SystemBackdrop)Value;
        }
#pragma warning restore 0618
        private object get_80_MicaBackdrop_Kind(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            return that.Kind;
        }
        private void set_80_MicaBackdrop_Kind(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            that.Kind = (global::Microsoft.UI.Composition.SystemBackdrops.MicaKind)Value;
        }
        private object get_81_Thickness_Left(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Left;
        }
        private void set_81_Thickness_Left(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Left = (global::System.Double)Value;
        }
        private object get_82_Thickness_Top(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Top;
        }
        private void set_82_Thickness_Top(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Top = (global::System.Double)Value;
        }
        private object get_83_Thickness_Right(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Right;
        }
        private void set_83_Thickness_Right(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Right = (global::System.Double)Value;
        }
        private object get_84_Thickness_Bottom(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Bottom;
        }
        private void set_84_Thickness_Bottom(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Bottom = (global::System.Double)Value;
        }
        private object get_85_CornerRadius_TopLeft(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.TopLeft;
        }
        private void set_85_CornerRadius_TopLeft(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.TopLeft = (global::System.Double)Value;
        }
        private object get_86_CornerRadius_TopRight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.TopRight;
        }
        private void set_86_CornerRadius_TopRight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.TopRight = (global::System.Double)Value;
        }
        private object get_87_CornerRadius_BottomRight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.BottomRight;
        }
        private void set_87_CornerRadius_BottomRight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.BottomRight = (global::System.Double)Value;
        }
        private object get_88_CornerRadius_BottomLeft(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.BottomLeft;
        }
        private void set_88_CornerRadius_BottomLeft(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.BottomLeft = (global::System.Double)Value;
        }
        private object get_89_AlarmsPage_ViewModel(object instance)
        {
            var that = (global::Shield.App.Views.AlarmsPage)instance;
            return that.ViewModel;
        }
        private object get_90_DataGrid_AutoGenerateColumns(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.AutoGenerateColumns;
        }
        private void set_90_DataGrid_AutoGenerateColumns(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.AutoGenerateColumns = (global::System.Boolean)Value;
        }
        private object get_91_DataGrid_ItemsSource(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.ItemsSource;
        }
        private void set_91_DataGrid_ItemsSource(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_92_DataGrid_GridLinesVisibility(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.GridLinesVisibility;
        }
        private void set_92_DataGrid_GridLinesVisibility(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.GridLinesVisibility = (global::CommunityToolkit.WinUI.UI.Controls.DataGridGridLinesVisibility)Value;
        }
        private object get_93_DataGrid_AlternatingRowBackground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.AlternatingRowBackground;
        }
        private void set_93_DataGrid_AlternatingRowBackground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.AlternatingRowBackground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_94_DataGrid_CanUserSortColumns(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.CanUserSortColumns;
        }
        private void set_94_DataGrid_CanUserSortColumns(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.CanUserSortColumns = (global::System.Boolean)Value;
        }
        private object get_95_DataGrid_RowStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.RowStyle;
        }
        private void set_95_DataGrid_RowStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.RowStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_96_DataGrid_Columns(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.Columns;
        }
        private object get_97_DataGridColumn_ActualWidth(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.ActualWidth;
        }
        private object get_98_DataGridColumn_CanUserReorder(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.CanUserReorder;
        }
        private void set_98_DataGridColumn_CanUserReorder(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.CanUserReorder = (global::System.Boolean)Value;
        }
        private object get_99_DataGridColumn_CanUserResize(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.CanUserResize;
        }
        private void set_99_DataGridColumn_CanUserResize(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.CanUserResize = (global::System.Boolean)Value;
        }
        private object get_100_DataGridColumn_CanUserSort(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.CanUserSort;
        }
        private void set_100_DataGridColumn_CanUserSort(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.CanUserSort = (global::System.Boolean)Value;
        }
        private object get_101_DataGridColumn_CellStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.CellStyle;
        }
        private void set_101_DataGridColumn_CellStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.CellStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_102_DataGridColumn_ClipboardContentBinding(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.ClipboardContentBinding;
        }
        private void set_102_DataGridColumn_ClipboardContentBinding(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.ClipboardContentBinding = (global::Microsoft.UI.Xaml.Data.Binding)Value;
        }
        private object get_103_DataGridColumn_DisplayIndex(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.DisplayIndex;
        }
        private void set_103_DataGridColumn_DisplayIndex(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.DisplayIndex = (global::System.Int32)Value;
        }
        private object get_104_DataGridColumn_DragIndicatorStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.DragIndicatorStyle;
        }
        private void set_104_DataGridColumn_DragIndicatorStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.DragIndicatorStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_105_DataGridColumn_HeaderStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.HeaderStyle;
        }
        private void set_105_DataGridColumn_HeaderStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.HeaderStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_106_DataGridColumn_Header(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.Header;
        }
        private void set_106_DataGridColumn_Header(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_107_DataGridColumn_IsAutoGenerated(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.IsAutoGenerated;
        }
        private object get_108_DataGridColumn_IsFrozen(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.IsFrozen;
        }
        private object get_109_DataGridColumn_IsReadOnly(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.IsReadOnly;
        }
        private void set_109_DataGridColumn_IsReadOnly(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.IsReadOnly = (global::System.Boolean)Value;
        }
        private object get_110_DataGridColumn_MaxWidth(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.MaxWidth;
        }
        private void set_110_DataGridColumn_MaxWidth(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.MaxWidth = (global::System.Double)Value;
        }
        private object get_111_DataGridColumn_MinWidth(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.MinWidth;
        }
        private void set_111_DataGridColumn_MinWidth(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.MinWidth = (global::System.Double)Value;
        }
        private object get_112_DataGridColumn_SortDirection(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.SortDirection;
        }
        private void set_112_DataGridColumn_SortDirection(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.SortDirection = (global::System.Nullable<global::CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection>)Value;
        }
        private object get_113_DataGridColumn_Tag(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.Tag;
        }
        private void set_113_DataGridColumn_Tag(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.Tag = (global::System.Object)Value;
        }
        private object get_114_DataGridColumn_Visibility(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.Visibility;
        }
        private void set_114_DataGridColumn_Visibility(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.Visibility = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_115_DataGridColumn_Width(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            return that.Width;
        }
        private void set_115_DataGridColumn_Width(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)instance;
            that.Width = (global::CommunityToolkit.WinUI.UI.Controls.DataGridLength)Value;
        }
        private object get_116_DataGrid_AlternatingRowForeground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.AlternatingRowForeground;
        }
        private void set_116_DataGrid_AlternatingRowForeground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.AlternatingRowForeground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_117_DataGrid_AreRowDetailsFrozen(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.AreRowDetailsFrozen;
        }
        private void set_117_DataGrid_AreRowDetailsFrozen(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.AreRowDetailsFrozen = (global::System.Boolean)Value;
        }
        private object get_118_DataGrid_AreRowGroupHeadersFrozen(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.AreRowGroupHeadersFrozen;
        }
        private void set_118_DataGrid_AreRowGroupHeadersFrozen(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.AreRowGroupHeadersFrozen = (global::System.Boolean)Value;
        }
        private object get_119_DataGrid_CanUserReorderColumns(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.CanUserReorderColumns;
        }
        private void set_119_DataGrid_CanUserReorderColumns(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.CanUserReorderColumns = (global::System.Boolean)Value;
        }
        private object get_120_DataGrid_CanUserResizeColumns(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.CanUserResizeColumns;
        }
        private void set_120_DataGrid_CanUserResizeColumns(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.CanUserResizeColumns = (global::System.Boolean)Value;
        }
        private object get_121_DataGrid_CellStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.CellStyle;
        }
        private void set_121_DataGrid_CellStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.CellStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_122_DataGrid_ClipboardCopyMode(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.ClipboardCopyMode;
        }
        private void set_122_DataGrid_ClipboardCopyMode(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.ClipboardCopyMode = (global::CommunityToolkit.WinUI.UI.Controls.DataGridClipboardCopyMode)Value;
        }
        private object get_123_DataGrid_ColumnHeaderHeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.ColumnHeaderHeight;
        }
        private void set_123_DataGrid_ColumnHeaderHeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.ColumnHeaderHeight = (global::System.Double)Value;
        }
        private object get_124_DataGrid_ColumnHeaderStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.ColumnHeaderStyle;
        }
        private void set_124_DataGrid_ColumnHeaderStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.ColumnHeaderStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_125_DataGrid_ColumnWidth(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.ColumnWidth;
        }
        private void set_125_DataGrid_ColumnWidth(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.ColumnWidth = (global::CommunityToolkit.WinUI.UI.Controls.DataGridLength)Value;
        }
        private object get_126_DataGrid_DataFetchSize(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.DataFetchSize;
        }
        private void set_126_DataGrid_DataFetchSize(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.DataFetchSize = (global::System.Double)Value;
        }
        private object get_127_DataGrid_DragIndicatorStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.DragIndicatorStyle;
        }
        private void set_127_DataGrid_DragIndicatorStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.DragIndicatorStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_128_DataGrid_DropLocationIndicatorStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.DropLocationIndicatorStyle;
        }
        private void set_128_DataGrid_DropLocationIndicatorStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.DropLocationIndicatorStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_129_DataGrid_FrozenColumnCount(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.FrozenColumnCount;
        }
        private void set_129_DataGrid_FrozenColumnCount(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.FrozenColumnCount = (global::System.Int32)Value;
        }
        private object get_130_DataGrid_HeadersVisibility(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.HeadersVisibility;
        }
        private void set_130_DataGrid_HeadersVisibility(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.HeadersVisibility = (global::CommunityToolkit.WinUI.UI.Controls.DataGridHeadersVisibility)Value;
        }
        private object get_131_DataGrid_HorizontalGridLinesBrush(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.HorizontalGridLinesBrush;
        }
        private void set_131_DataGrid_HorizontalGridLinesBrush(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.HorizontalGridLinesBrush = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_132_DataGrid_HorizontalScrollBarVisibility(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.HorizontalScrollBarVisibility;
        }
        private void set_132_DataGrid_HorizontalScrollBarVisibility(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.HorizontalScrollBarVisibility = (global::Microsoft.UI.Xaml.Controls.ScrollBarVisibility)Value;
        }
        private object get_133_DataGrid_IsReadOnly(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.IsReadOnly;
        }
        private void set_133_DataGrid_IsReadOnly(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.IsReadOnly = (global::System.Boolean)Value;
        }
        private object get_134_DataGrid_IsValid(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.IsValid;
        }
        private object get_135_DataGrid_IncrementalLoadingThreshold(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.IncrementalLoadingThreshold;
        }
        private void set_135_DataGrid_IncrementalLoadingThreshold(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.IncrementalLoadingThreshold = (global::System.Double)Value;
        }
        private object get_136_DataGrid_IncrementalLoadingTrigger(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.IncrementalLoadingTrigger;
        }
        private void set_136_DataGrid_IncrementalLoadingTrigger(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.IncrementalLoadingTrigger = (global::Microsoft.UI.Xaml.Controls.IncrementalLoadingTrigger)Value;
        }
        private object get_137_DataGrid_MaxColumnWidth(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.MaxColumnWidth;
        }
        private void set_137_DataGrid_MaxColumnWidth(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.MaxColumnWidth = (global::System.Double)Value;
        }
        private object get_138_DataGrid_MinColumnWidth(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.MinColumnWidth;
        }
        private void set_138_DataGrid_MinColumnWidth(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.MinColumnWidth = (global::System.Double)Value;
        }
        private object get_139_DataGrid_RowBackground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.RowBackground;
        }
        private void set_139_DataGrid_RowBackground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.RowBackground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_140_DataGrid_RowDetailsTemplate(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.RowDetailsTemplate;
        }
        private void set_140_DataGrid_RowDetailsTemplate(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.RowDetailsTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_141_DataGrid_RowDetailsVisibilityMode(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.RowDetailsVisibilityMode;
        }
        private void set_141_DataGrid_RowDetailsVisibilityMode(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.RowDetailsVisibilityMode = (global::CommunityToolkit.WinUI.UI.Controls.DataGridRowDetailsVisibilityMode)Value;
        }
        private object get_142_DataGrid_RowForeground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.RowForeground;
        }
        private void set_142_DataGrid_RowForeground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.RowForeground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_143_DataGrid_RowHeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.RowHeight;
        }
        private void set_143_DataGrid_RowHeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.RowHeight = (global::System.Double)Value;
        }
        private object get_144_DataGrid_RowHeaderWidth(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.RowHeaderWidth;
        }
        private void set_144_DataGrid_RowHeaderWidth(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.RowHeaderWidth = (global::System.Double)Value;
        }
        private object get_145_DataGrid_RowHeaderStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.RowHeaderStyle;
        }
        private void set_145_DataGrid_RowHeaderStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.RowHeaderStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_146_DataGrid_SelectionMode(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.SelectionMode;
        }
        private void set_146_DataGrid_SelectionMode(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.SelectionMode = (global::CommunityToolkit.WinUI.UI.Controls.DataGridSelectionMode)Value;
        }
        private object get_147_DataGrid_SelectedIndex(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.SelectedIndex;
        }
        private void set_147_DataGrid_SelectedIndex(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_148_DataGrid_SelectedItem(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.SelectedItem;
        }
        private void set_148_DataGrid_SelectedItem(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_149_DataGrid_VerticalGridLinesBrush(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.VerticalGridLinesBrush;
        }
        private void set_149_DataGrid_VerticalGridLinesBrush(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.VerticalGridLinesBrush = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_150_DataGrid_VerticalScrollBarVisibility(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.VerticalScrollBarVisibility;
        }
        private void set_150_DataGrid_VerticalScrollBarVisibility(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.VerticalScrollBarVisibility = (global::Microsoft.UI.Xaml.Controls.ScrollBarVisibility)Value;
        }
        private object get_151_DataGrid_CurrentColumn(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.CurrentColumn;
        }
        private void set_151_DataGrid_CurrentColumn(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.CurrentColumn = (global::CommunityToolkit.WinUI.UI.Controls.DataGridColumn)Value;
        }
        private object get_152_DataGrid_RowGroupHeaderPropertyNameAlternative(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.RowGroupHeaderPropertyNameAlternative;
        }
        private void set_152_DataGrid_RowGroupHeaderPropertyNameAlternative(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            that.RowGroupHeaderPropertyNameAlternative = (global::System.String)Value;
        }
        private object get_153_DataGrid_RowGroupHeaderStyles(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.RowGroupHeaderStyles;
        }
        private object get_154_DataGrid_SelectedItems(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGrid)instance;
            return that.SelectedItems;
        }
        private object get_155_DataGridRow_DetailsTemplate(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridRow)instance;
            return that.DetailsTemplate;
        }
        private void set_155_DataGridRow_DetailsTemplate(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridRow)instance;
            that.DetailsTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_156_DataGridRow_DetailsVisibility(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridRow)instance;
            return that.DetailsVisibility;
        }
        private void set_156_DataGridRow_DetailsVisibility(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridRow)instance;
            that.DetailsVisibility = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_157_DataGridRow_Header(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridRow)instance;
            return that.Header;
        }
        private void set_157_DataGridRow_Header(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridRow)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_158_DataGridRow_HeaderStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridRow)instance;
            return that.HeaderStyle;
        }
        private void set_158_DataGridRow_HeaderStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridRow)instance;
            that.HeaderStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_159_DataGridRow_IsValid(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridRow)instance;
            return that.IsValid;
        }
        private object get_160_DataGridBoundColumn_Binding(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn)instance;
            return that.Binding;
        }
        private void set_160_DataGridBoundColumn_Binding(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn)instance;
            that.Binding = (global::Microsoft.UI.Xaml.Data.Binding)Value;
        }
        private object get_161_DataGridTextColumn_FontFamily(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn)instance;
            return that.FontFamily;
        }
        private void set_161_DataGridTextColumn_FontFamily(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn)instance;
            that.FontFamily = (global::Microsoft.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_162_DataGridTextColumn_FontSize(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn)instance;
            return that.FontSize;
        }
        private void set_162_DataGridTextColumn_FontSize(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_163_DataGridTextColumn_FontStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn)instance;
            return that.FontStyle;
        }
        private void set_163_DataGridTextColumn_FontStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_164_DataGridTextColumn_FontWeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn)instance;
            return that.FontWeight;
        }
        private void set_164_DataGridTextColumn_FontWeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn)instance;
            that.FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_165_DataGridTextColumn_Foreground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn)instance;
            return that.Foreground;
        }
        private void set_165_DataGridTextColumn_Foreground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn)instance;
            that.Foreground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_166_DataGridBoundColumn_ClipboardContentBinding(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn)instance;
            return that.ClipboardContentBinding;
        }
        private void set_166_DataGridBoundColumn_ClipboardContentBinding(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn)instance;
            that.ClipboardContentBinding = (global::Microsoft.UI.Xaml.Data.Binding)Value;
        }
        private object get_167_DataGridBoundColumn_EditingElementStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn)instance;
            return that.EditingElementStyle;
        }
        private void set_167_DataGridBoundColumn_EditingElementStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn)instance;
            that.EditingElementStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_168_DataGridBoundColumn_ElementStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn)instance;
            return that.ElementStyle;
        }
        private void set_168_DataGridBoundColumn_ElementStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn)instance;
            that.ElementStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_169_AlarmsTableViewPage_ViewModel(object instance)
        {
            var that = (global::Shield.App.Views.AlarmsTableViewPage)instance;
            return that.ViewModel;
        }
        private object get_170_ContractsPage_ViewModel(object instance)
        {
            var that = (global::Shield.App.Views.ContractsPage)instance;
            return that.ViewModel;
        }
        private object get_171_ProfilePage_IsLoggedIn(object instance)
        {
            var that = (global::Shield.App.Views.ProfilePage)instance;
            return that.IsLoggedIn;
        }
        private void set_171_ProfilePage_IsLoggedIn(object instance, object Value)
        {
            var that = (global::Shield.App.Views.ProfilePage)instance;
            that.IsLoggedIn = (global::System.Boolean)Value;
        }
        private object get_172_ProfilePage_IsNotLoggedIn(object instance)
        {
            var that = (global::Shield.App.Views.ProfilePage)instance;
            return that.IsNotLoggedIn;
        }
        private object get_173_ProfilePage_Profile(object instance)
        {
            var that = (global::Shield.App.Views.ProfilePage)instance;
            return that.Profile;
        }
        private void set_173_ProfilePage_Profile(object instance, object Value)
        {
            var that = (global::Shield.App.Views.ProfilePage)instance;
            that.Profile = (global::Shield.DataAccess.DTOs.ProfileInfoDto)Value;
        }
        private object get_174_SettingsPage_ViewModel(object instance)
        {
            var that = (global::Shield.App.Views.SettingsPage)instance;
            return that.ViewModel;
        }
        private object get_175_NavigationView_IsBackButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackButtonVisible;
        }
        private void set_175_NavigationView_IsBackButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackButtonVisible = (global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible)Value;
        }
        private object get_176_NavigationView_IsBackEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackEnabled;
        }
        private void set_176_NavigationView_IsBackEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackEnabled = (global::System.Boolean)Value;
        }
        private object get_177_NavigationView_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectedItem;
        }
        private void set_177_NavigationView_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_178_NavigationView_IsSettingsVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsSettingsVisible;
        }
        private void set_178_NavigationView_IsSettingsVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsSettingsVisible = (global::System.Boolean)Value;
        }
        private object get_179_NavigationView_ExpandedModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ExpandedModeThresholdWidth;
        }
        private void set_179_NavigationView_ExpandedModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ExpandedModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_180_NavigationView_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.Header;
        }
        private void set_180_NavigationView_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_181_NavigationView_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItems;
        }
        private object get_182_NavigationView_FooterMenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItems;
        }
        private object get_183_NavigationView_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.HeaderTemplate;
        }
        private void set_183_NavigationView_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_184_NavigationView_AlwaysShowHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AlwaysShowHeader;
        }
        private void set_184_NavigationView_AlwaysShowHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AlwaysShowHeader = (global::System.Boolean)Value;
        }
        private object get_185_NavigationView_AutoSuggestBox(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AutoSuggestBox;
        }
        private void set_185_NavigationView_AutoSuggestBox(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AutoSuggestBox = (global::Microsoft.UI.Xaml.Controls.AutoSuggestBox)Value;
        }
        private object get_186_NavigationView_CompactModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactModeThresholdWidth;
        }
        private void set_186_NavigationView_CompactModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_187_NavigationView_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactPaneLength;
        }
        private void set_187_NavigationView_CompactPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactPaneLength = (global::System.Double)Value;
        }
        private object get_188_NavigationView_ContentOverlay(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ContentOverlay;
        }
        private void set_188_NavigationView_ContentOverlay(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ContentOverlay = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_189_NavigationView_DisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.DisplayMode;
        }
        private object get_190_NavigationView_FooterMenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItemsSource;
        }
        private void set_190_NavigationView_FooterMenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.FooterMenuItemsSource = (global::System.Object)Value;
        }
        private object get_191_NavigationView_IsPaneOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneOpen;
        }
        private void set_191_NavigationView_IsPaneOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneOpen = (global::System.Boolean)Value;
        }
        private object get_192_NavigationView_IsPaneToggleButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneToggleButtonVisible;
        }
        private void set_192_NavigationView_IsPaneToggleButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneToggleButtonVisible = (global::System.Boolean)Value;
        }
        private object get_193_NavigationView_IsPaneVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneVisible;
        }
        private void set_193_NavigationView_IsPaneVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneVisible = (global::System.Boolean)Value;
        }
        private object get_194_NavigationView_IsTitleBarAutoPaddingEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsTitleBarAutoPaddingEnabled;
        }
        private void set_194_NavigationView_IsTitleBarAutoPaddingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsTitleBarAutoPaddingEnabled = (global::System.Boolean)Value;
        }
        private object get_195_NavigationView_MenuItemContainerStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyle;
        }
        private void set_195_NavigationView_MenuItemContainerStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_196_NavigationView_MenuItemContainerStyleSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyleSelector;
        }
        private void set_196_NavigationView_MenuItemContainerStyleSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyleSelector = (global::Microsoft.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_197_NavigationView_MenuItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplate;
        }
        private void set_197_NavigationView_MenuItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_198_NavigationView_MenuItemTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplateSelector;
        }
        private void set_198_NavigationView_MenuItemTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_199_NavigationView_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemsSource;
        }
        private void set_199_NavigationView_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_200_NavigationView_OpenPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OpenPaneLength;
        }
        private void set_200_NavigationView_OpenPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OpenPaneLength = (global::System.Double)Value;
        }
        private object get_201_NavigationView_OverflowLabelMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OverflowLabelMode;
        }
        private void set_201_NavigationView_OverflowLabelMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OverflowLabelMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode)Value;
        }
        private object get_202_NavigationView_PaneCustomContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneCustomContent;
        }
        private void set_202_NavigationView_PaneCustomContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneCustomContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_203_NavigationView_PaneDisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneDisplayMode;
        }
        private void set_203_NavigationView_PaneDisplayMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneDisplayMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode)Value;
        }
        private object get_204_NavigationView_PaneFooter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneFooter;
        }
        private void set_204_NavigationView_PaneFooter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneFooter = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_205_NavigationView_PaneHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneHeader;
        }
        private void set_205_NavigationView_PaneHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_206_NavigationView_PaneTitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneTitle;
        }
        private void set_206_NavigationView_PaneTitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneTitle = (global::System.String)Value;
        }
        private object get_207_NavigationView_PaneToggleButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneToggleButtonStyle;
        }
        private void set_207_NavigationView_PaneToggleButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneToggleButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_208_NavigationView_SelectionFollowsFocus(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectionFollowsFocus;
        }
        private void set_208_NavigationView_SelectionFollowsFocus(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectionFollowsFocus = (global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus)Value;
        }
        private object get_209_NavigationView_SettingsItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SettingsItem;
        }
        private object get_210_NavigationView_ShoulderNavigationEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ShoulderNavigationEnabled;
        }
        private void set_210_NavigationView_ShoulderNavigationEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ShoulderNavigationEnabled = (global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled)Value;
        }
        private object get_211_NavigationView_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.TemplateSettings;
        }
        private object get_212_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_212_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_213_TeachingTip_Title(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Title;
        }
        private void set_213_TeachingTip_Title(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_214_TeachingTip_Subtitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Subtitle;
        }
        private void set_214_TeachingTip_Subtitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Subtitle = (global::System.String)Value;
        }
        private object get_215_TeachingTip_PreferredPlacement(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.PreferredPlacement;
        }
        private void set_215_TeachingTip_PreferredPlacement(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.PreferredPlacement = (global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode)Value;
        }
        private object get_216_TeachingTip_PlacementMargin(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.PlacementMargin;
        }
        private void set_216_TeachingTip_PlacementMargin(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.PlacementMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_217_TeachingTip_IsLightDismissEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IsLightDismissEnabled;
        }
        private void set_217_TeachingTip_IsLightDismissEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IsLightDismissEnabled = (global::System.Boolean)Value;
        }
        private object get_218_TeachingTip_ActionButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonCommand;
        }
        private void set_218_TeachingTip_ActionButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_219_TeachingTip_ActionButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonCommandParameter;
        }
        private void set_219_TeachingTip_ActionButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_220_TeachingTip_ActionButtonContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonContent;
        }
        private void set_220_TeachingTip_ActionButtonContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonContent = (global::System.Object)Value;
        }
        private object get_221_TeachingTip_ActionButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonStyle;
        }
        private void set_221_TeachingTip_ActionButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_222_TeachingTip_CloseButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonCommand;
        }
        private void set_222_TeachingTip_CloseButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_223_TeachingTip_CloseButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonCommandParameter;
        }
        private void set_223_TeachingTip_CloseButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_224_TeachingTip_CloseButtonContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonContent;
        }
        private void set_224_TeachingTip_CloseButtonContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonContent = (global::System.Object)Value;
        }
        private object get_225_TeachingTip_CloseButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonStyle;
        }
        private void set_225_TeachingTip_CloseButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_226_TeachingTip_HeroContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.HeroContent;
        }
        private void set_226_TeachingTip_HeroContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.HeroContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_227_TeachingTip_HeroContentPlacement(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.HeroContentPlacement;
        }
        private void set_227_TeachingTip_HeroContentPlacement(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.HeroContentPlacement = (global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode)Value;
        }
        private object get_228_TeachingTip_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IconSource;
        }
        private void set_228_TeachingTip_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_229_TeachingTip_IsOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IsOpen;
        }
        private void set_229_TeachingTip_IsOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_230_TeachingTip_ShouldConstrainToRootBounds(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ShouldConstrainToRootBounds;
        }
        private void set_230_TeachingTip_ShouldConstrainToRootBounds(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ShouldConstrainToRootBounds = (global::System.Boolean)Value;
        }
        private object get_231_TeachingTip_TailVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.TailVisibility;
        }
        private void set_231_TeachingTip_TailVisibility(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.TailVisibility = (global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility)Value;
        }
        private object get_232_TeachingTip_Target(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Target;
        }
        private void set_232_TeachingTip_Target(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Target = (global::Microsoft.UI.Xaml.FrameworkElement)Value;
        }
        private object get_233_TeachingTip_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.TemplateSettings;
        }
        private object get_234_NavigationViewItem_Icon(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.Icon;
        }
        private void set_234_NavigationViewItem_Icon(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_235_NavigationViewItem_SelectsOnInvoked(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.SelectsOnInvoked;
        }
        private void set_235_NavigationViewItem_SelectsOnInvoked(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.SelectsOnInvoked = (global::System.Boolean)Value;
        }
        private object get_236_NavigationViewItem_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItems;
        }
        private object get_237_NavigationViewItem_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.CompactPaneLength;
        }
        private object get_238_NavigationViewItem_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_238_NavigationViewItem_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_239_NavigationViewItem_InfoBadge(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.InfoBadge;
        }
        private void set_239_NavigationViewItem_InfoBadge(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.InfoBadge = (global::Microsoft.UI.Xaml.Controls.InfoBadge)Value;
        }
        private object get_240_NavigationViewItem_IsChildSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsChildSelected;
        }
        private void set_240_NavigationViewItem_IsChildSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsChildSelected = (global::System.Boolean)Value;
        }
        private object get_241_NavigationViewItem_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsExpanded;
        }
        private void set_241_NavigationViewItem_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_242_NavigationViewItem_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItemsSource;
        }
        private void set_242_NavigationViewItem_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_243_NavigationViewItemBase_IsSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            return that.IsSelected;
        }
        private void set_243_NavigationViewItemBase_IsSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_244_NavigationHelper_NavigateTo(object instance)
        {
            return global::Shield.App.Helpers.NavigationHelper.GetNavigateTo((global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance);
        }
        private void set_244_NavigationHelper_NavigateTo(object instance, object Value)
        {
            global::Shield.App.Helpers.NavigationHelper.SetNavigateTo((global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance, (global::System.String)Value);
        }
        private object get_245_NavigationViewHeaderBehavior_DefaultHeader(object instance)
        {
            var that = (global::Shield.App.Behaviors.NavigationViewHeaderBehavior)instance;
            return that.DefaultHeader;
        }
        private void set_245_NavigationViewHeaderBehavior_DefaultHeader(object instance, object Value)
        {
            var that = (global::Shield.App.Behaviors.NavigationViewHeaderBehavior)instance;
            that.DefaultHeader = (global::System.Object)Value;
        }
        private object get_246_NavigationViewHeaderBehavior_DefaultHeaderTemplate(object instance)
        {
            var that = (global::Shield.App.Behaviors.NavigationViewHeaderBehavior)instance;
            return that.DefaultHeaderTemplate;
        }
        private void set_246_NavigationViewHeaderBehavior_DefaultHeaderTemplate(object instance, object Value)
        {
            var that = (global::Shield.App.Behaviors.NavigationViewHeaderBehavior)instance;
            that.DefaultHeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_247_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Behavior<global::Microsoft.UI.Xaml.Controls.NavigationView>)instance;
            return that.AssociatedObject;
        }
        private object get_248_NavigationViewHeaderBehavior_HeaderMode(object instance)
        {
            return global::Shield.App.Behaviors.NavigationViewHeaderBehavior.GetHeaderMode((global::Microsoft.UI.Xaml.Controls.Page)instance);
        }
        private void set_248_NavigationViewHeaderBehavior_HeaderMode(object instance, object Value)
        {
            global::Shield.App.Behaviors.NavigationViewHeaderBehavior.SetHeaderMode((global::Microsoft.UI.Xaml.Controls.Page)instance, (global::Shield.App.Behaviors.NavigationViewHeaderMode)Value);
        }
        private object get_249_NavigationViewHeaderBehavior_HeaderContext(object instance)
        {
            return global::Shield.App.Behaviors.NavigationViewHeaderBehavior.GetHeaderContext((global::Microsoft.UI.Xaml.Controls.Page)instance);
        }
        private void set_249_NavigationViewHeaderBehavior_HeaderContext(object instance, object Value)
        {
            global::Shield.App.Behaviors.NavigationViewHeaderBehavior.SetHeaderContext((global::Microsoft.UI.Xaml.Controls.Page)instance, (global::System.Object)Value);
        }
        private object get_250_NavigationViewHeaderBehavior_HeaderTemplate(object instance)
        {
            return global::Shield.App.Behaviors.NavigationViewHeaderBehavior.GetHeaderTemplate((global::Microsoft.UI.Xaml.Controls.Page)instance);
        }
        private void set_250_NavigationViewHeaderBehavior_HeaderTemplate(object instance, object Value)
        {
            global::Shield.App.Behaviors.NavigationViewHeaderBehavior.SetHeaderTemplate((global::Microsoft.UI.Xaml.Controls.Page)instance, (global::Microsoft.UI.Xaml.DataTemplate)Value);
        }
        private object get_251_ShellPage_ViewModel(object instance)
        {
            var that = (global::Shield.App.Views.ShellPage)instance;
            return that.ViewModel;
        }
        private object get_252_TreeViewNode_Children(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Children;
        }
        private object get_253_TreeViewNode_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Content;
        }
        private void set_253_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_254_TreeViewNode_Depth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Depth;
        }
        private object get_255_TreeViewNode_HasChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasChildren;
        }
        private object get_256_TreeViewNode_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_256_TreeViewNode_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_257_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_257_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_258_TreeViewNode_Parent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Parent;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Shield.App.Shield_App_XamlTypeInfo.XamlMember xamlMember = null;
            global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.Header":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_Expander_Header;
                xamlMember.Setter = set_1_Expander_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.ExpandDirection":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ExpandDirection", "Microsoft.UI.Xaml.Controls.ExpandDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_Expander_ExpandDirection;
                xamlMember.Setter = set_2_Expander_ExpandDirection;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.HeaderTemplate":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_Expander_HeaderTemplate;
                xamlMember.Setter = set_3_Expander_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.HeaderTemplateSelector":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeaderTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_Expander_HeaderTemplateSelector;
                xamlMember.Setter = set_4_Expander_HeaderTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.IsExpanded":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_Expander_IsExpanded;
                xamlMember.Setter = set_5_Expander_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.TemplateSettings":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings");
                xamlMember.Getter = get_6_Expander_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Controls.AlarmControl.Bailee":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.AlarmControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Bailee", "String");
                xamlMember.Getter = get_7_AlarmControl_Bailee;
                xamlMember.Setter = set_7_AlarmControl_Bailee;
                break;
            case "Shield.App.Controls.AlarmControl.Address":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.AlarmControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Address", "String");
                xamlMember.Getter = get_8_AlarmControl_Address;
                xamlMember.Setter = set_8_AlarmControl_Address;
                break;
            case "Shield.App.Controls.AlarmControl.Result":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.AlarmControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Result", "Shield.DataAccess.Enums.AlarmResult");
                xamlMember.Getter = get_9_AlarmControl_Result;
                xamlMember.Setter = set_9_AlarmControl_Result;
                break;
            case "Shield.App.Controls.AlarmControl.DateTime":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.AlarmControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DateTime", "System.DateTime");
                xamlMember.Getter = get_10_AlarmControl_DateTime;
                xamlMember.Setter = set_10_AlarmControl_DateTime;
                break;
            case "Shield.App.Controls.AlarmControl.DateOnly":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.AlarmControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DateOnly", "System.DateOnly");
                xamlMember.Getter = get_11_AlarmControl_DateOnly;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Controls.AlarmControl.TimeOnly":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.AlarmControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "TimeOnly", "System.TimeOnly");
                xamlMember.Getter = get_12_AlarmControl_TimeOnly;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.AttachedShadowBase.Offset":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.AttachedShadowBase");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Offset", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_AttachedShadowBase_Offset;
                xamlMember.Setter = set_13_AttachedShadowBase_Offset;
                break;
            case "CommunityToolkit.WinUI.AttachedShadowBase.Opacity":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.AttachedShadowBase");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_AttachedShadowBase_Opacity;
                xamlMember.Setter = set_14_AttachedShadowBase_Opacity;
                break;
            case "CommunityToolkit.WinUI.Media.AttachedCardShadow.CornerRadius":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Media.AttachedCardShadow");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CornerRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_AttachedCardShadow_CornerRadius;
                xamlMember.Setter = set_15_AttachedCardShadow_CornerRadius;
                break;
            case "CommunityToolkit.WinUI.Media.AttachedCardShadow.InnerContentClipMode":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Media.AttachedCardShadow");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "InnerContentClipMode", "CommunityToolkit.WinUI.Media.InnerContentClipMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_AttachedCardShadow_InnerContentClipMode;
                xamlMember.Setter = set_16_AttachedCardShadow_InnerContentClipMode;
                break;
            case "CommunityToolkit.WinUI.AttachedShadowBase.BlurRadius":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.AttachedShadowBase");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "BlurRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_AttachedShadowBase_BlurRadius;
                xamlMember.Setter = set_17_AttachedShadowBase_BlurRadius;
                break;
            case "CommunityToolkit.WinUI.AttachedShadowBase.Color":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.AttachedShadowBase");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_AttachedShadowBase_Color;
                xamlMember.Setter = set_18_AttachedShadowBase_Color;
                break;
            case "CommunityToolkit.WinUI.Effects.Shadow":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Effects");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Shadow", "CommunityToolkit.WinUI.AttachedShadowBase");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.FrameworkElement");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_19_Effects_Shadow;
                xamlMember.Setter = set_19_Effects_Shadow;
                break;
            case "Shield.App.Controls.ContractControl.ContractId":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ContractId", "Int32");
                xamlMember.Getter = get_20_ContractControl_ContractId;
                xamlMember.Setter = set_20_ContractControl_ContractId;
                break;
            case "Shield.App.Controls.ContractControl.Address":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Address", "String");
                xamlMember.Getter = get_21_ContractControl_Address;
                xamlMember.Setter = set_21_ContractControl_Address;
                break;
            case "Shield.App.Controls.ContractControl.OwnersString":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "OwnersString", "String");
                xamlMember.Getter = get_22_ContractControl_OwnersString;
                xamlMember.Setter = set_22_ContractControl_OwnersString;
                break;
            case "Shield.App.Controls.ContractControl.OwnersControls":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "OwnersControls", "System.Collections.ObjectModel.ObservableCollection`1<Microsoft.UI.Xaml.Controls.TextBlock>");
                xamlMember.Getter = get_23_ContractControl_OwnersControls;
                xamlMember.Setter = set_23_ContractControl_OwnersControls;
                break;
            case "Shield.App.Controls.ContractControl.Bailee":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Bailee", "String");
                xamlMember.Getter = get_24_ContractControl_Bailee;
                xamlMember.Setter = set_24_ContractControl_Bailee;
                break;
            case "Shield.App.Controls.ContractControl.Comment":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Comment", "String");
                xamlMember.Getter = get_25_ContractControl_Comment;
                xamlMember.Setter = set_25_ContractControl_Comment;
                break;
            case "Shield.App.Controls.ContractControl.Organization":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Organization", "String");
                xamlMember.Getter = get_26_ContractControl_Organization;
                xamlMember.Setter = set_26_ContractControl_Organization;
                break;
            case "Shield.App.Controls.ContractControl.IsLegalEntity":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsLegalEntity", "Boolean");
                xamlMember.Getter = get_27_ContractControl_IsLegalEntity;
                xamlMember.Setter = set_27_ContractControl_IsLegalEntity;
                break;
            case "Shield.App.Controls.ContractControl.Plan":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Plan", "Shield.DataAccess.DTOs.PlanDto");
                xamlMember.Getter = get_28_ContractControl_Plan;
                xamlMember.Setter = set_28_ContractControl_Plan;
                break;
            case "Shield.App.Controls.ContractControl.Picture":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Picture", "Shield.DataAccess.DTOs.PictureDto");
                xamlMember.Getter = get_29_ContractControl_Picture;
                xamlMember.Setter = set_29_ContractControl_Picture;
                break;
            case "Shield.App.Controls.ContractControl.Bitmap":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Bitmap", "Microsoft.UI.Xaml.Media.Imaging.BitmapImage");
                xamlMember.Getter = get_30_ContractControl_Bitmap;
                xamlMember.Setter = set_30_ContractControl_Bitmap;
                break;
            case "Shield.App.Controls.ContractControl.Date":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Date", "System.DateOnly");
                xamlMember.Getter = get_31_ContractControl_Date;
                xamlMember.Setter = set_31_ContractControl_Date;
                break;
            case "Shield.App.Controls.ContractControl.Alarms":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.ContractControl");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Alarms", "System.Collections.Generic.List`1<Shield.DataAccess.DTOs.AlarmDto>");
                xamlMember.Getter = get_32_ContractControl_Alarms;
                xamlMember.Setter = set_32_ContractControl_Alarms;
                break;
            case "Shield.DataAccess.DTOs.AlarmDto.AlarmId":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.DataAccess.DTOs.AlarmDto");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "AlarmId", "System.Nullable`1<Int32>");
                xamlMember.Getter = get_33_AlarmDto_AlarmId;
                xamlMember.Setter = set_33_AlarmDto_AlarmId;
                break;
            case "Shield.DataAccess.DTOs.AlarmDto.Date":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.DataAccess.DTOs.AlarmDto");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Date", "System.Nullable`1<System.DateTime>");
                xamlMember.Getter = get_34_AlarmDto_Date;
                xamlMember.Setter = set_34_AlarmDto_Date;
                break;
            case "Shield.DataAccess.DTOs.AlarmDto.Contract":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.DataAccess.DTOs.AlarmDto");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Contract", "Shield.DataAccess.DTOs.ContractDto");
                xamlMember.Getter = get_35_AlarmDto_Contract;
                xamlMember.Setter = set_35_AlarmDto_Contract;
                break;
            case "Shield.DataAccess.DTOs.AlarmDto.Result":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.DataAccess.DTOs.AlarmDto");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Result", "System.Nullable`1<Shield.DataAccess.Enums.AlarmResult>");
                xamlMember.Getter = get_36_AlarmDto_Result;
                xamlMember.Setter = set_36_AlarmDto_Result;
                break;
            case "Shield.DataAccess.DTOs.AlarmDto.Organization":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.DataAccess.DTOs.AlarmDto");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Organization", "String");
                xamlMember.Getter = get_37_AlarmDto_Organization;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.DataAccess.DTOs.AlarmDto.Address":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.DataAccess.DTOs.AlarmDto");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Address", "String");
                xamlMember.Getter = get_38_AlarmDto_Address;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.DataAccess.DTOs.AlarmDto.ResultLocalizationTag":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.DataAccess.DTOs.AlarmDto");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ResultLocalizationTag", "String");
                xamlMember.Getter = get_39_AlarmDto_ResultLocalizationTag;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Controls.RegisterContent.Login":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.RegisterContent");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Login", "String");
                xamlMember.Getter = get_40_RegisterContent_Login;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Controls.RegisterContent.Email":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.RegisterContent");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Email", "String");
                xamlMember.Getter = get_41_RegisterContent_Email;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Controls.RegisterContent.Password":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.RegisterContent");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Password", "String");
                xamlMember.Getter = get_42_RegisterContent_Password;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Controls.RegisterLoginContent.Login":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.RegisterLoginContent");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Login", "String");
                xamlMember.Getter = get_43_RegisterLoginContent_Login;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Controls.RegisterLoginContent.Password":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.RegisterLoginContent");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Password", "String");
                xamlMember.Getter = get_44_RegisterLoginContent_Password;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Controls.RemovableTextBox.Value":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Controls.RemovableTextBox");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Value", "String");
                xamlMember.Getter = get_45_RemovableTextBox_Value;
                xamlMember.Setter = set_45_RemovableTextBox_Value;
                break;
            case "Microsoft.UI.Xaml.Controls.WebView2.CanGoBack":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.WebView2");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CanGoBack", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_WebView2_CanGoBack;
                xamlMember.Setter = set_46_WebView2_CanGoBack;
                break;
            case "Microsoft.UI.Xaml.Controls.WebView2.CanGoForward":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.WebView2");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CanGoForward", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_WebView2_CanGoForward;
                xamlMember.Setter = set_47_WebView2_CanGoForward;
                break;
            case "Microsoft.UI.Xaml.Controls.WebView2.CoreWebView2":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.WebView2");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CoreWebView2", "Microsoft.Web.WebView2.Core.CoreWebView2");
                xamlMember.Getter = get_48_WebView2_CoreWebView2;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.WebView2.DefaultBackgroundColor":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.WebView2");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DefaultBackgroundColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_WebView2_DefaultBackgroundColor;
                xamlMember.Setter = set_49_WebView2_DefaultBackgroundColor;
                break;
            case "Microsoft.UI.Xaml.Controls.WebView2.Source":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.WebView2");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_WebView2_Source;
                xamlMember.Setter = set_50_WebView2_Source;
                break;
            case "Shield.App.Dialogs.CreateContractDialog.PlanPath":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Dialogs.CreateContractDialog");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PlanPath", "String");
                xamlMember.Getter = get_51_CreateContractDialog_PlanPath;
                xamlMember.Setter = set_51_CreateContractDialog_PlanPath;
                break;
            case "Shield.App.Dialogs.CreateContractDialog.PhotoPath":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Dialogs.CreateContractDialog");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PhotoPath", "String");
                xamlMember.Getter = get_52_CreateContractDialog_PhotoPath;
                xamlMember.Setter = set_52_CreateContractDialog_PhotoPath;
                break;
            case "Shield.App.Dialogs.CreateContractDialog.Bailee":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Dialogs.CreateContractDialog");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Bailee", "String");
                xamlMember.Getter = get_53_CreateContractDialog_Bailee;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Dialogs.CreateContractDialog.Address":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Dialogs.CreateContractDialog");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Address", "String");
                xamlMember.Getter = get_54_CreateContractDialog_Address;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Dialogs.CreateContractDialog.Comment":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Dialogs.CreateContractDialog");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Comment", "String");
                xamlMember.Getter = get_55_CreateContractDialog_Comment;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Dialogs.CreateContractDialog.Organization":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Dialogs.CreateContractDialog");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Organization", "String");
                xamlMember.Getter = get_56_CreateContractDialog_Organization;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Dialogs.CreateContractDialog.IsLegalEntity":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Dialogs.CreateContractDialog");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsLegalEntity", "Boolean");
                xamlMember.Getter = get_57_CreateContractDialog_IsLegalEntity;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Dialogs.CreateContractDialog.Owners":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Dialogs.CreateContractDialog");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Owners", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_58_CreateContractDialog_Owners;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.WindowContent":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "WindowContent", "Object");
                xamlMember.Getter = get_59_WindowEx_WindowContent;
                xamlMember.Setter = set_59_WindowEx_WindowContent;
                break;
            case "WinUIEx.WindowEx.MinWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MinWidth", "Double");
                xamlMember.Getter = get_60_WindowEx_MinWidth;
                xamlMember.Setter = set_60_WindowEx_MinWidth;
                break;
            case "WinUIEx.WindowEx.MinHeight":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MinHeight", "Double");
                xamlMember.Getter = get_61_WindowEx_MinHeight;
                xamlMember.Setter = set_61_WindowEx_MinHeight;
                break;
            case "WinUIEx.WindowEx.PersistenceId":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PersistenceId", "String");
                xamlMember.Getter = get_62_WindowEx_PersistenceId;
                xamlMember.Setter = set_62_WindowEx_PersistenceId;
                break;
            case "WinUIEx.WindowEx.AppWindow":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "AppWindow", "Microsoft.UI.Windowing.AppWindow");
                xamlMember.Getter = get_63_WindowEx_AppWindow;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.TaskBarIcon":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "TaskBarIcon", "WinUIEx.Icon");
                xamlMember.Getter = get_64_WindowEx_TaskBarIcon;
                xamlMember.Setter = set_64_WindowEx_TaskBarIcon;
                break;
            case "WinUIEx.WindowEx.Title":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_65_WindowEx_Title;
                xamlMember.Setter = set_65_WindowEx_Title;
                break;
            case "WinUIEx.WindowEx.IsTitleBarVisible":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsTitleBarVisible", "Boolean");
                xamlMember.Getter = get_66_WindowEx_IsTitleBarVisible;
                xamlMember.Setter = set_66_WindowEx_IsTitleBarVisible;
                break;
            case "WinUIEx.WindowEx.IsMinimizable":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsMinimizable", "Boolean");
                xamlMember.Getter = get_67_WindowEx_IsMinimizable;
                xamlMember.Setter = set_67_WindowEx_IsMinimizable;
                break;
            case "WinUIEx.WindowEx.IsMaximizable":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsMaximizable", "Boolean");
                xamlMember.Getter = get_68_WindowEx_IsMaximizable;
                xamlMember.Setter = set_68_WindowEx_IsMaximizable;
                break;
            case "WinUIEx.WindowEx.IsResizable":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsResizable", "Boolean");
                xamlMember.Getter = get_69_WindowEx_IsResizable;
                xamlMember.Setter = set_69_WindowEx_IsResizable;
                break;
            case "WinUIEx.WindowEx.WindowState":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "WindowState", "WinUIEx.WindowState");
                xamlMember.Getter = get_70_WindowEx_WindowState;
                xamlMember.Setter = set_70_WindowEx_WindowState;
                break;
            case "WinUIEx.WindowEx.IsShownInSwitchers":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsShownInSwitchers", "Boolean");
                xamlMember.Getter = get_71_WindowEx_IsShownInSwitchers;
                xamlMember.Setter = set_71_WindowEx_IsShownInSwitchers;
                break;
            case "WinUIEx.WindowEx.IsAlwaysOnTop":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsAlwaysOnTop", "Boolean");
                xamlMember.Getter = get_72_WindowEx_IsAlwaysOnTop;
                xamlMember.Setter = set_72_WindowEx_IsAlwaysOnTop;
                break;
            case "WinUIEx.WindowEx.Presenter":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Presenter", "Microsoft.UI.Windowing.AppWindowPresenter");
                xamlMember.Getter = get_73_WindowEx_Presenter;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.PresenterKind":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PresenterKind", "Microsoft.UI.Windowing.AppWindowPresenterKind");
                xamlMember.Getter = get_74_WindowEx_PresenterKind;
                xamlMember.Setter = set_74_WindowEx_PresenterKind;
                break;
            case "WinUIEx.WindowEx.Width":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_75_WindowEx_Width;
                xamlMember.Setter = set_75_WindowEx_Width;
                break;
            case "WinUIEx.WindowEx.Height":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_76_WindowEx_Height;
                xamlMember.Setter = set_76_WindowEx_Height;
                break;
            case "WinUIEx.WindowEx.MaxWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MaxWidth", "Double");
                xamlMember.Getter = get_77_WindowEx_MaxWidth;
                xamlMember.Setter = set_77_WindowEx_MaxWidth;
                break;
            case "WinUIEx.WindowEx.MaxHeight":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MaxHeight", "Double");
                xamlMember.Getter = get_78_WindowEx_MaxHeight;
                xamlMember.Setter = set_78_WindowEx_MaxHeight;
                break;
            case "WinUIEx.WindowEx.Backdrop":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Backdrop", "WinUIEx.SystemBackdrop");
                xamlMember.Getter = get_79_WindowEx_Backdrop;
                xamlMember.Setter = set_79_WindowEx_Backdrop;
                break;
            case "Microsoft.UI.Xaml.Media.MicaBackdrop.Kind":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Media.MicaBackdrop");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Kind", "Microsoft.UI.Composition.SystemBackdrops.MicaKind");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_MicaBackdrop_Kind;
                xamlMember.Setter = set_80_MicaBackdrop_Kind;
                break;
            case "Microsoft.UI.Xaml.Thickness.Left":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Left", "Double");
                xamlMember.Getter = get_81_Thickness_Left;
                xamlMember.Setter = set_81_Thickness_Left;
                break;
            case "Microsoft.UI.Xaml.Thickness.Top":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Top", "Double");
                xamlMember.Getter = get_82_Thickness_Top;
                xamlMember.Setter = set_82_Thickness_Top;
                break;
            case "Microsoft.UI.Xaml.Thickness.Right":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Right", "Double");
                xamlMember.Getter = get_83_Thickness_Right;
                xamlMember.Setter = set_83_Thickness_Right;
                break;
            case "Microsoft.UI.Xaml.Thickness.Bottom":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Bottom", "Double");
                xamlMember.Getter = get_84_Thickness_Bottom;
                xamlMember.Setter = set_84_Thickness_Bottom;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.TopLeft":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "TopLeft", "Double");
                xamlMember.Getter = get_85_CornerRadius_TopLeft;
                xamlMember.Setter = set_85_CornerRadius_TopLeft;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.TopRight":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "TopRight", "Double");
                xamlMember.Getter = get_86_CornerRadius_TopRight;
                xamlMember.Setter = set_86_CornerRadius_TopRight;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.BottomRight":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "BottomRight", "Double");
                xamlMember.Getter = get_87_CornerRadius_BottomRight;
                xamlMember.Setter = set_87_CornerRadius_BottomRight;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.BottomLeft":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "BottomLeft", "Double");
                xamlMember.Getter = get_88_CornerRadius_BottomLeft;
                xamlMember.Setter = set_88_CornerRadius_BottomLeft;
                break;
            case "Shield.App.Views.AlarmsPage.ViewModel":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Views.AlarmsPage");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ViewModel", "Shield.App.ViewModels.AlarmsViewModel");
                xamlMember.Getter = get_89_AlarmsPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.AutoGenerateColumns":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "AutoGenerateColumns", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_DataGrid_AutoGenerateColumns;
                xamlMember.Setter = set_90_DataGrid_AutoGenerateColumns;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.ItemsSource":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_DataGrid_ItemsSource;
                xamlMember.Setter = set_91_DataGrid_ItemsSource;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.GridLinesVisibility":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "GridLinesVisibility", "CommunityToolkit.WinUI.UI.Controls.DataGridGridLinesVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_DataGrid_GridLinesVisibility;
                xamlMember.Setter = set_92_DataGrid_GridLinesVisibility;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.AlternatingRowBackground":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "AlternatingRowBackground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_DataGrid_AlternatingRowBackground;
                xamlMember.Setter = set_93_DataGrid_AlternatingRowBackground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.CanUserSortColumns":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CanUserSortColumns", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_DataGrid_CanUserSortColumns;
                xamlMember.Setter = set_94_DataGrid_CanUserSortColumns;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.RowStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "RowStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_DataGrid_RowStyle;
                xamlMember.Setter = set_95_DataGrid_RowStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.Columns":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Columns", "System.Collections.ObjectModel.ObservableCollection`1<CommunityToolkit.WinUI.UI.Controls.DataGridColumn>");
                xamlMember.Getter = get_96_DataGrid_Columns;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.ActualWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ActualWidth", "Double");
                xamlMember.Getter = get_97_DataGridColumn_ActualWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.CanUserReorder":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CanUserReorder", "Boolean");
                xamlMember.Getter = get_98_DataGridColumn_CanUserReorder;
                xamlMember.Setter = set_98_DataGridColumn_CanUserReorder;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.CanUserResize":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CanUserResize", "Boolean");
                xamlMember.Getter = get_99_DataGridColumn_CanUserResize;
                xamlMember.Setter = set_99_DataGridColumn_CanUserResize;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.CanUserSort":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CanUserSort", "Boolean");
                xamlMember.Getter = get_100_DataGridColumn_CanUserSort;
                xamlMember.Setter = set_100_DataGridColumn_CanUserSort;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.CellStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CellStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.Getter = get_101_DataGridColumn_CellStyle;
                xamlMember.Setter = set_101_DataGridColumn_CellStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.ClipboardContentBinding":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ClipboardContentBinding", "Microsoft.UI.Xaml.Data.Binding");
                xamlMember.Getter = get_102_DataGridColumn_ClipboardContentBinding;
                xamlMember.Setter = set_102_DataGridColumn_ClipboardContentBinding;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.DisplayIndex":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DisplayIndex", "Int32");
                xamlMember.Getter = get_103_DataGridColumn_DisplayIndex;
                xamlMember.Setter = set_103_DataGridColumn_DisplayIndex;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.DragIndicatorStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DragIndicatorStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.Getter = get_104_DataGridColumn_DragIndicatorStyle;
                xamlMember.Setter = set_104_DataGridColumn_DragIndicatorStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.HeaderStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeaderStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.Getter = get_105_DataGridColumn_HeaderStyle;
                xamlMember.Setter = set_105_DataGridColumn_HeaderStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.Header":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.Getter = get_106_DataGridColumn_Header;
                xamlMember.Setter = set_106_DataGridColumn_Header;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.IsAutoGenerated":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsAutoGenerated", "Boolean");
                xamlMember.Getter = get_107_DataGridColumn_IsAutoGenerated;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.IsFrozen":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsFrozen", "Boolean");
                xamlMember.Getter = get_108_DataGridColumn_IsFrozen;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.IsReadOnly":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.Getter = get_109_DataGridColumn_IsReadOnly;
                xamlMember.Setter = set_109_DataGridColumn_IsReadOnly;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.MaxWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MaxWidth", "Double");
                xamlMember.Getter = get_110_DataGridColumn_MaxWidth;
                xamlMember.Setter = set_110_DataGridColumn_MaxWidth;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.MinWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MinWidth", "Double");
                xamlMember.Getter = get_111_DataGridColumn_MinWidth;
                xamlMember.Setter = set_111_DataGridColumn_MinWidth;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.SortDirection":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "SortDirection", "System.Nullable`1<CommunityToolkit.WinUI.UI.Controls.DataGridSortDirection>");
                xamlMember.Getter = get_112_DataGridColumn_SortDirection;
                xamlMember.Setter = set_112_DataGridColumn_SortDirection;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.Tag":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Tag", "Object");
                xamlMember.Getter = get_113_DataGridColumn_Tag;
                xamlMember.Setter = set_113_DataGridColumn_Tag;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.Visibility":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Visibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.Getter = get_114_DataGridColumn_Visibility;
                xamlMember.Setter = set_114_DataGridColumn_Visibility;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridColumn.Width":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Width", "CommunityToolkit.WinUI.UI.Controls.DataGridLength");
                xamlMember.Getter = get_115_DataGridColumn_Width;
                xamlMember.Setter = set_115_DataGridColumn_Width;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.AlternatingRowForeground":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "AlternatingRowForeground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_DataGrid_AlternatingRowForeground;
                xamlMember.Setter = set_116_DataGrid_AlternatingRowForeground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.AreRowDetailsFrozen":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "AreRowDetailsFrozen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_DataGrid_AreRowDetailsFrozen;
                xamlMember.Setter = set_117_DataGrid_AreRowDetailsFrozen;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.AreRowGroupHeadersFrozen":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "AreRowGroupHeadersFrozen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_DataGrid_AreRowGroupHeadersFrozen;
                xamlMember.Setter = set_118_DataGrid_AreRowGroupHeadersFrozen;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.CanUserReorderColumns":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CanUserReorderColumns", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_DataGrid_CanUserReorderColumns;
                xamlMember.Setter = set_119_DataGrid_CanUserReorderColumns;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.CanUserResizeColumns":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CanUserResizeColumns", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_DataGrid_CanUserResizeColumns;
                xamlMember.Setter = set_120_DataGrid_CanUserResizeColumns;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.CellStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CellStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_DataGrid_CellStyle;
                xamlMember.Setter = set_121_DataGrid_CellStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.ClipboardCopyMode":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ClipboardCopyMode", "CommunityToolkit.WinUI.UI.Controls.DataGridClipboardCopyMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_DataGrid_ClipboardCopyMode;
                xamlMember.Setter = set_122_DataGrid_ClipboardCopyMode;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.ColumnHeaderHeight":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ColumnHeaderHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_DataGrid_ColumnHeaderHeight;
                xamlMember.Setter = set_123_DataGrid_ColumnHeaderHeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.ColumnHeaderStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ColumnHeaderStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_DataGrid_ColumnHeaderStyle;
                xamlMember.Setter = set_124_DataGrid_ColumnHeaderStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.ColumnWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ColumnWidth", "CommunityToolkit.WinUI.UI.Controls.DataGridLength");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_DataGrid_ColumnWidth;
                xamlMember.Setter = set_125_DataGrid_ColumnWidth;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.DataFetchSize":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DataFetchSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_DataGrid_DataFetchSize;
                xamlMember.Setter = set_126_DataGrid_DataFetchSize;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.DragIndicatorStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DragIndicatorStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_DataGrid_DragIndicatorStyle;
                xamlMember.Setter = set_127_DataGrid_DragIndicatorStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.DropLocationIndicatorStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DropLocationIndicatorStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_DataGrid_DropLocationIndicatorStyle;
                xamlMember.Setter = set_128_DataGrid_DropLocationIndicatorStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.FrozenColumnCount":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "FrozenColumnCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_DataGrid_FrozenColumnCount;
                xamlMember.Setter = set_129_DataGrid_FrozenColumnCount;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.HeadersVisibility":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeadersVisibility", "CommunityToolkit.WinUI.UI.Controls.DataGridHeadersVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_DataGrid_HeadersVisibility;
                xamlMember.Setter = set_130_DataGrid_HeadersVisibility;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.HorizontalGridLinesBrush":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HorizontalGridLinesBrush", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_DataGrid_HorizontalGridLinesBrush;
                xamlMember.Setter = set_131_DataGrid_HorizontalGridLinesBrush;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.HorizontalScrollBarVisibility":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HorizontalScrollBarVisibility", "Microsoft.UI.Xaml.Controls.ScrollBarVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_DataGrid_HorizontalScrollBarVisibility;
                xamlMember.Setter = set_132_DataGrid_HorizontalScrollBarVisibility;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.IsReadOnly":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_DataGrid_IsReadOnly;
                xamlMember.Setter = set_133_DataGrid_IsReadOnly;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.IsValid":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsValid", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_DataGrid_IsValid;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.IncrementalLoadingThreshold":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IncrementalLoadingThreshold", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_DataGrid_IncrementalLoadingThreshold;
                xamlMember.Setter = set_135_DataGrid_IncrementalLoadingThreshold;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.IncrementalLoadingTrigger":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IncrementalLoadingTrigger", "Microsoft.UI.Xaml.Controls.IncrementalLoadingTrigger");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_DataGrid_IncrementalLoadingTrigger;
                xamlMember.Setter = set_136_DataGrid_IncrementalLoadingTrigger;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.MaxColumnWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MaxColumnWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_DataGrid_MaxColumnWidth;
                xamlMember.Setter = set_137_DataGrid_MaxColumnWidth;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.MinColumnWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MinColumnWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_DataGrid_MinColumnWidth;
                xamlMember.Setter = set_138_DataGrid_MinColumnWidth;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.RowBackground":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "RowBackground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_DataGrid_RowBackground;
                xamlMember.Setter = set_139_DataGrid_RowBackground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.RowDetailsTemplate":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "RowDetailsTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_DataGrid_RowDetailsTemplate;
                xamlMember.Setter = set_140_DataGrid_RowDetailsTemplate;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.RowDetailsVisibilityMode":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "RowDetailsVisibilityMode", "CommunityToolkit.WinUI.UI.Controls.DataGridRowDetailsVisibilityMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_DataGrid_RowDetailsVisibilityMode;
                xamlMember.Setter = set_141_DataGrid_RowDetailsVisibilityMode;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.RowForeground":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "RowForeground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_DataGrid_RowForeground;
                xamlMember.Setter = set_142_DataGrid_RowForeground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.RowHeight":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "RowHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_DataGrid_RowHeight;
                xamlMember.Setter = set_143_DataGrid_RowHeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.RowHeaderWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "RowHeaderWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_DataGrid_RowHeaderWidth;
                xamlMember.Setter = set_144_DataGrid_RowHeaderWidth;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.RowHeaderStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "RowHeaderStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_DataGrid_RowHeaderStyle;
                xamlMember.Setter = set_145_DataGrid_RowHeaderStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.SelectionMode":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "SelectionMode", "CommunityToolkit.WinUI.UI.Controls.DataGridSelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_146_DataGrid_SelectionMode;
                xamlMember.Setter = set_146_DataGrid_SelectionMode;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.SelectedIndex":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_147_DataGrid_SelectedIndex;
                xamlMember.Setter = set_147_DataGrid_SelectedIndex;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.SelectedItem":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_148_DataGrid_SelectedItem;
                xamlMember.Setter = set_148_DataGrid_SelectedItem;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.VerticalGridLinesBrush":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "VerticalGridLinesBrush", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_149_DataGrid_VerticalGridLinesBrush;
                xamlMember.Setter = set_149_DataGrid_VerticalGridLinesBrush;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.VerticalScrollBarVisibility":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "VerticalScrollBarVisibility", "Microsoft.UI.Xaml.Controls.ScrollBarVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_150_DataGrid_VerticalScrollBarVisibility;
                xamlMember.Setter = set_150_DataGrid_VerticalScrollBarVisibility;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.CurrentColumn":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CurrentColumn", "CommunityToolkit.WinUI.UI.Controls.DataGridColumn");
                xamlMember.Getter = get_151_DataGrid_CurrentColumn;
                xamlMember.Setter = set_151_DataGrid_CurrentColumn;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.RowGroupHeaderPropertyNameAlternative":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "RowGroupHeaderPropertyNameAlternative", "String");
                xamlMember.Getter = get_152_DataGrid_RowGroupHeaderPropertyNameAlternative;
                xamlMember.Setter = set_152_DataGrid_RowGroupHeaderPropertyNameAlternative;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.RowGroupHeaderStyles":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "RowGroupHeaderStyles", "System.Collections.ObjectModel.ObservableCollection`1<Microsoft.UI.Xaml.Style>");
                xamlMember.Getter = get_153_DataGrid_RowGroupHeaderStyles;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGrid.SelectedItems":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGrid");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.IList");
                xamlMember.Getter = get_154_DataGrid_SelectedItems;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridRow.DetailsTemplate":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridRow");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DetailsTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_155_DataGridRow_DetailsTemplate;
                xamlMember.Setter = set_155_DataGridRow_DetailsTemplate;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridRow.DetailsVisibility":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridRow");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DetailsVisibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_156_DataGridRow_DetailsVisibility;
                xamlMember.Setter = set_156_DataGridRow_DetailsVisibility;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridRow.Header":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridRow");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_157_DataGridRow_Header;
                xamlMember.Setter = set_157_DataGridRow_Header;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridRow.HeaderStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridRow");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeaderStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_158_DataGridRow_HeaderStyle;
                xamlMember.Setter = set_158_DataGridRow_HeaderStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridRow.IsValid":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridRow");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsValid", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_159_DataGridRow_IsValid;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn.Binding":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Binding", "Microsoft.UI.Xaml.Data.Binding");
                xamlMember.Getter = get_160_DataGridBoundColumn_Binding;
                xamlMember.Setter = set_160_DataGridBoundColumn_Binding;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn.FontFamily":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "FontFamily", "Microsoft.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_161_DataGridTextColumn_FontFamily;
                xamlMember.Setter = set_161_DataGridTextColumn_FontFamily;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn.FontSize":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.Getter = get_162_DataGridTextColumn_FontSize;
                xamlMember.Setter = set_162_DataGridTextColumn_FontSize;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn.FontStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.Getter = get_163_DataGridTextColumn_FontStyle;
                xamlMember.Setter = set_163_DataGridTextColumn_FontStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn.FontWeight":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.Getter = get_164_DataGridTextColumn_FontWeight;
                xamlMember.Setter = set_164_DataGridTextColumn_FontWeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn.Foreground":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridTextColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Foreground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_165_DataGridTextColumn_Foreground;
                xamlMember.Setter = set_165_DataGridTextColumn_Foreground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn.ClipboardContentBinding":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ClipboardContentBinding", "Microsoft.UI.Xaml.Data.Binding");
                xamlMember.Getter = get_166_DataGridBoundColumn_ClipboardContentBinding;
                xamlMember.Setter = set_166_DataGridBoundColumn_ClipboardContentBinding;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn.EditingElementStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "EditingElementStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.Getter = get_167_DataGridBoundColumn_EditingElementStyle;
                xamlMember.Setter = set_167_DataGridBoundColumn_EditingElementStyle;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn.ElementStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.DataGridBoundColumn");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ElementStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.Getter = get_168_DataGridBoundColumn_ElementStyle;
                xamlMember.Setter = set_168_DataGridBoundColumn_ElementStyle;
                break;
            case "Shield.App.Views.AlarmsTableViewPage.ViewModel":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Views.AlarmsTableViewPage");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ViewModel", "Shield.App.ViewModels.AlarmsTableViewViewModel");
                xamlMember.Getter = get_169_AlarmsTableViewPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Views.ContractsPage.ViewModel":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Views.ContractsPage");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ViewModel", "Shield.App.ViewModels.ContractsViewModel");
                xamlMember.Getter = get_170_ContractsPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Views.ProfilePage.IsLoggedIn":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Views.ProfilePage");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsLoggedIn", "Boolean");
                xamlMember.Getter = get_171_ProfilePage_IsLoggedIn;
                xamlMember.Setter = set_171_ProfilePage_IsLoggedIn;
                break;
            case "Shield.App.Views.ProfilePage.IsNotLoggedIn":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Views.ProfilePage");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsNotLoggedIn", "Boolean");
                xamlMember.Getter = get_172_ProfilePage_IsNotLoggedIn;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Views.ProfilePage.Profile":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Views.ProfilePage");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Profile", "Shield.DataAccess.DTOs.ProfileInfoDto");
                xamlMember.Getter = get_173_ProfilePage_Profile;
                xamlMember.Setter = set_173_ProfilePage_Profile;
                break;
            case "Shield.App.Views.SettingsPage.ViewModel":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Views.SettingsPage");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ViewModel", "Shield.App.ViewModels.SettingsViewModel");
                xamlMember.Getter = get_174_SettingsPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackButtonVisible":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsBackButtonVisible", "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_NavigationView_IsBackButtonVisible;
                xamlMember.Setter = set_175_NavigationView_IsBackButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackEnabled":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsBackEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_NavigationView_IsBackEnabled;
                xamlMember.Setter = set_176_NavigationView_IsBackEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectedItem":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_NavigationView_SelectedItem;
                xamlMember.Setter = set_177_NavigationView_SelectedItem;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsSettingsVisible":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsSettingsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_NavigationView_IsSettingsVisible;
                xamlMember.Setter = set_178_NavigationView_IsSettingsVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ExpandedModeThresholdWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ExpandedModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_179_NavigationView_ExpandedModeThresholdWidth;
                xamlMember.Setter = set_179_NavigationView_ExpandedModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.Header":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_180_NavigationView_Header;
                xamlMember.Setter = set_180_NavigationView_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItems":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_181_NavigationView_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItems":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "FooterMenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_182_NavigationView_FooterMenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.HeaderTemplate":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_183_NavigationView_HeaderTemplate;
                xamlMember.Setter = set_183_NavigationView_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AlwaysShowHeader":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "AlwaysShowHeader", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_184_NavigationView_AlwaysShowHeader;
                xamlMember.Setter = set_184_NavigationView_AlwaysShowHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AutoSuggestBox":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "AutoSuggestBox", "Microsoft.UI.Xaml.Controls.AutoSuggestBox");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_185_NavigationView_AutoSuggestBox;
                xamlMember.Setter = set_185_NavigationView_AutoSuggestBox;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactModeThresholdWidth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CompactModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_186_NavigationView_CompactModeThresholdWidth;
                xamlMember.Setter = set_186_NavigationView_CompactModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactPaneLength":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_187_NavigationView_CompactPaneLength;
                xamlMember.Setter = set_187_NavigationView_CompactPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ContentOverlay":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ContentOverlay", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_188_NavigationView_ContentOverlay;
                xamlMember.Setter = set_188_NavigationView_ContentOverlay;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.DisplayMode":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_189_NavigationView_DisplayMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsSource":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "FooterMenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_190_NavigationView_FooterMenuItemsSource;
                xamlMember.Setter = set_190_NavigationView_FooterMenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneOpen":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsPaneOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_191_NavigationView_IsPaneOpen;
                xamlMember.Setter = set_191_NavigationView_IsPaneOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneToggleButtonVisible":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsPaneToggleButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_192_NavigationView_IsPaneToggleButtonVisible;
                xamlMember.Setter = set_192_NavigationView_IsPaneToggleButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneVisible":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsPaneVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_193_NavigationView_IsPaneVisible;
                xamlMember.Setter = set_193_NavigationView_IsPaneVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsTitleBarAutoPaddingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_194_NavigationView_IsTitleBarAutoPaddingEnabled;
                xamlMember.Setter = set_194_NavigationView_IsTitleBarAutoPaddingEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_195_NavigationView_MenuItemContainerStyle;
                xamlMember.Setter = set_195_NavigationView_MenuItemContainerStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleSelector":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyleSelector", "Microsoft.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_196_NavigationView_MenuItemContainerStyleSelector;
                xamlMember.Setter = set_196_NavigationView_MenuItemContainerStyleSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplate":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MenuItemTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_197_NavigationView_MenuItemTemplate;
                xamlMember.Setter = set_197_NavigationView_MenuItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateSelector":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MenuItemTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_198_NavigationView_MenuItemTemplateSelector;
                xamlMember.Setter = set_198_NavigationView_MenuItemTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsSource":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_199_NavigationView_MenuItemsSource;
                xamlMember.Setter = set_199_NavigationView_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OpenPaneLength":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "OpenPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_200_NavigationView_OpenPaneLength;
                xamlMember.Setter = set_200_NavigationView_OpenPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OverflowLabelMode":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "OverflowLabelMode", "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_201_NavigationView_OverflowLabelMode;
                xamlMember.Setter = set_201_NavigationView_OverflowLabelMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneCustomContent":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PaneCustomContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_202_NavigationView_PaneCustomContent;
                xamlMember.Setter = set_202_NavigationView_PaneCustomContent;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneDisplayMode":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PaneDisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_203_NavigationView_PaneDisplayMode;
                xamlMember.Setter = set_203_NavigationView_PaneDisplayMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneFooter":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PaneFooter", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_204_NavigationView_PaneFooter;
                xamlMember.Setter = set_204_NavigationView_PaneFooter;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneHeader":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PaneHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_205_NavigationView_PaneHeader;
                xamlMember.Setter = set_205_NavigationView_PaneHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneTitle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PaneTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_206_NavigationView_PaneTitle;
                xamlMember.Setter = set_206_NavigationView_PaneTitle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneToggleButtonStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PaneToggleButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_207_NavigationView_PaneToggleButtonStyle;
                xamlMember.Setter = set_207_NavigationView_PaneToggleButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectionFollowsFocus":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "SelectionFollowsFocus", "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_208_NavigationView_SelectionFollowsFocus;
                xamlMember.Setter = set_208_NavigationView_SelectionFollowsFocus;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SettingsItem":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "SettingsItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_209_NavigationView_SettingsItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ShoulderNavigationEnabled":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ShoulderNavigationEnabled", "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_210_NavigationView_ShoulderNavigationEnabled;
                xamlMember.Setter = set_210_NavigationView_ShoulderNavigationEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.TemplateSettings":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_211_NavigationView_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_212_Interaction_Behaviors;
                xamlMember.Setter = set_212_Interaction_Behaviors;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Title":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_213_TeachingTip_Title;
                xamlMember.Setter = set_213_TeachingTip_Title;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Subtitle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Subtitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_214_TeachingTip_Subtitle;
                xamlMember.Setter = set_214_TeachingTip_Subtitle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.PreferredPlacement":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PreferredPlacement", "Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_215_TeachingTip_PreferredPlacement;
                xamlMember.Setter = set_215_TeachingTip_PreferredPlacement;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.PlacementMargin":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "PlacementMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_216_TeachingTip_PlacementMargin;
                xamlMember.Setter = set_216_TeachingTip_PlacementMargin;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IsLightDismissEnabled":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsLightDismissEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_217_TeachingTip_IsLightDismissEnabled;
                xamlMember.Setter = set_217_TeachingTip_IsLightDismissEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonCommand":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ActionButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_218_TeachingTip_ActionButtonCommand;
                xamlMember.Setter = set_218_TeachingTip_ActionButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonCommandParameter":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ActionButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_219_TeachingTip_ActionButtonCommandParameter;
                xamlMember.Setter = set_219_TeachingTip_ActionButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonContent":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ActionButtonContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_220_TeachingTip_ActionButtonContent;
                xamlMember.Setter = set_220_TeachingTip_ActionButtonContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ActionButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_221_TeachingTip_ActionButtonStyle;
                xamlMember.Setter = set_221_TeachingTip_ActionButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonCommand":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CloseButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_222_TeachingTip_CloseButtonCommand;
                xamlMember.Setter = set_222_TeachingTip_CloseButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonCommandParameter":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CloseButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_223_TeachingTip_CloseButtonCommandParameter;
                xamlMember.Setter = set_223_TeachingTip_CloseButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonContent":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CloseButtonContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_224_TeachingTip_CloseButtonContent;
                xamlMember.Setter = set_224_TeachingTip_CloseButtonContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonStyle":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CloseButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_225_TeachingTip_CloseButtonStyle;
                xamlMember.Setter = set_225_TeachingTip_CloseButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.HeroContent":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeroContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_226_TeachingTip_HeroContent;
                xamlMember.Setter = set_226_TeachingTip_HeroContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.HeroContentPlacement":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeroContentPlacement", "Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_227_TeachingTip_HeroContentPlacement;
                xamlMember.Setter = set_227_TeachingTip_HeroContentPlacement;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IconSource":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_228_TeachingTip_IconSource;
                xamlMember.Setter = set_228_TeachingTip_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IsOpen":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_229_TeachingTip_IsOpen;
                xamlMember.Setter = set_229_TeachingTip_IsOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ShouldConstrainToRootBounds":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ShouldConstrainToRootBounds", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_230_TeachingTip_ShouldConstrainToRootBounds;
                xamlMember.Setter = set_230_TeachingTip_ShouldConstrainToRootBounds;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.TailVisibility":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "TailVisibility", "Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_231_TeachingTip_TailVisibility;
                xamlMember.Setter = set_231_TeachingTip_TailVisibility;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Target":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Target", "Microsoft.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_232_TeachingTip_Target;
                xamlMember.Setter = set_232_TeachingTip_Target;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.TemplateSettings":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_233_TeachingTip_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.Icon":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_234_NavigationViewItem_Icon;
                xamlMember.Setter = set_234_NavigationViewItem_Icon;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.SelectsOnInvoked":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "SelectsOnInvoked", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_235_NavigationViewItem_SelectsOnInvoked;
                xamlMember.Setter = set_235_NavigationViewItem_SelectsOnInvoked;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItems":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_236_NavigationViewItem_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.CompactPaneLength":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_237_NavigationViewItem_CompactPaneLength;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.HasUnrealizedChildren":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_238_NavigationViewItem_HasUnrealizedChildren;
                xamlMember.Setter = set_238_NavigationViewItem_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.InfoBadge":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "InfoBadge", "Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_239_NavigationViewItem_InfoBadge;
                xamlMember.Setter = set_239_NavigationViewItem_InfoBadge;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsChildSelected":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsChildSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_240_NavigationViewItem_IsChildSelected;
                xamlMember.Setter = set_240_NavigationViewItem_IsChildSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsExpanded":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_241_NavigationViewItem_IsExpanded;
                xamlMember.Setter = set_241_NavigationViewItem_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItemsSource":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_242_NavigationViewItem_MenuItemsSource;
                xamlMember.Setter = set_242_NavigationViewItem_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelected":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_243_NavigationViewItemBase_IsSelected;
                xamlMember.Setter = set_243_NavigationViewItemBase_IsSelected;
                break;
            case "Shield.App.Helpers.NavigationHelper.NavigateTo":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Helpers.NavigationHelper");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "NavigateTo", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_244_NavigationHelper_NavigateTo;
                xamlMember.Setter = set_244_NavigationHelper_NavigateTo;
                break;
            case "Shield.App.Behaviors.NavigationViewHeaderBehavior.DefaultHeader":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Behaviors.NavigationViewHeaderBehavior");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DefaultHeader", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_245_NavigationViewHeaderBehavior_DefaultHeader;
                xamlMember.Setter = set_245_NavigationViewHeaderBehavior_DefaultHeader;
                break;
            case "Shield.App.Behaviors.NavigationViewHeaderBehavior.DefaultHeaderTemplate":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Behaviors.NavigationViewHeaderBehavior");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "DefaultHeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_246_NavigationViewHeaderBehavior_DefaultHeaderTemplate;
                xamlMember.Setter = set_246_NavigationViewHeaderBehavior_DefaultHeaderTemplate;
                break;
            case "Microsoft.Xaml.Interactivity.Behavior`1<Microsoft.UI.Xaml.Controls.NavigationView>.AssociatedObject":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior`1<Microsoft.UI.Xaml.Controls.NavigationView>");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember.Getter = get_247_Behavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Shield.App.Behaviors.NavigationViewHeaderBehavior.HeaderMode":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Behaviors.NavigationViewHeaderBehavior");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeaderMode", "Shield.App.Behaviors.NavigationViewHeaderMode");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.Controls.Page");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_248_NavigationViewHeaderBehavior_HeaderMode;
                xamlMember.Setter = set_248_NavigationViewHeaderBehavior_HeaderMode;
                break;
            case "Shield.App.Behaviors.NavigationViewHeaderBehavior.HeaderContext":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Behaviors.NavigationViewHeaderBehavior");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeaderContext", "Object");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.Controls.Page");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_249_NavigationViewHeaderBehavior_HeaderContext;
                xamlMember.Setter = set_249_NavigationViewHeaderBehavior_HeaderContext;
                break;
            case "Shield.App.Behaviors.NavigationViewHeaderBehavior.HeaderTemplate":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Behaviors.NavigationViewHeaderBehavior");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.Controls.Page");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_250_NavigationViewHeaderBehavior_HeaderTemplate;
                xamlMember.Setter = set_250_NavigationViewHeaderBehavior_HeaderTemplate;
                break;
            case "Shield.App.Views.ShellPage.ViewModel":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shield.App.Views.ShellPage");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "ViewModel", "Shield.App.ViewModels.ShellViewModel");
                xamlMember.Getter = get_251_ShellPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Children":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>");
                xamlMember.Getter = get_252_TreeViewNode_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Content":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_253_TreeViewNode_Content;
                xamlMember.Setter = set_253_TreeViewNode_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Depth":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_254_TreeViewNode_Depth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_255_TreeViewNode_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.Getter = get_256_TreeViewNode_HasUnrealizedChildren;
                xamlMember.Setter = set_256_TreeViewNode_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_257_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_257_TreeViewNode_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Parent":
                userType = (global::Shield.App.Shield_App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Shield.App.Shield_App_XamlTypeInfo.XamlMember(this, "Parent", "Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember.Getter = get_258_TreeViewNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Shield.App.Shield_App_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::Shield.App.Shield_App_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Shield.App.Shield_App_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::Shield.App.Shield_App_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Shield.App.Shield_App_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

